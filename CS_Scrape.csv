title,score,id,url,comms_num,created,body,timestamp
"Accidentally destroyed production database on first day of a job, and was told to leave, on top of this i was told by the CTO that they need to get legal involved, how screwed am i?",25958,6ez8ag,https://www.reddit.com/r/cscareerquestions/comments/6ez8ag/accidentally_destroyed_production_database_on/,4306,1496491092.0,"Today was my first day on the job as a Junior Software Developer and was my first non-internship position after university. Unfortunately i screwed up badly. 

I was basically given a document detailing how to setup my local development environment. Which involves run a small script to create my own personal DB instance from some test data. After running the command i was supposed to copy the database url/password/username outputted by the command and configure my dev environment to point to that database. Unfortunately instead of copying the values outputted by the tool, i instead for whatever reason used the values the document had. 

Unfortunately apparently those values were actually for the production database (why they are documented in the dev setup guide i have no idea). Then from my understanding that the tests add fake data, and clear existing data between test runs which basically cleared all the data from the production database. Honestly i had no idea what i did and it wasn't about 30 or so minutes after did someone actually figure out/realize what i did.

While what i had done was sinking in. The CTO told me to leave and never come back. He also informed me that apparently legal would need to get involved due to severity of the data loss. I basically offered and pleaded to let me help in someway to redeem my self and i was told that i ""completely fucked everything up"". 

So i left. I kept an eye on slack, and from what i can tell the backups were not restoring and it seemed like the entire dev team was on full on panic mode. I sent a slack message to our CTO explaining my screw up. Only to have my slack account immediately disabled not long after sending the message. 

I haven't heard from HR, or anything and i am panicking to high heavens. I just moved across the country for this job, is there anything i can even remotely do to redeem my self in this situation? Can i possibly be sued for this? Should i contact HR directly? I am really confused, and terrified.

*EDIT* Just to make it even more embarrassing, i just realized that i took the laptop i was issued home with me (i have no idea why i did this at all). 

*EDIT 2* I just woke up, after deciding to drown my sorrows and i am shocked by the number of responses, well wishes and other things. Will do my best to sort through everything. ",2017-06-03 07:58:12
"Applied to our main competitor, they told my boss about it",4780,9ptj1r,https://www.reddit.com/r/cscareerquestions/comments/9ptj1r/applied_to_our_main_competitor_they_told_my_boss/,431,1540065041.0,"I was being underpaid and contacted the rival company, known for paying good salaries. It was my first time doing a hackerrank style interview and failed it. I obviously haven't told anyone about it so I'm positive their HR told my boss to create a toxic work environment for us, which they succeeded in doing. Not sure how to deal with this, I am quitting so it shouldn't matter but still left a bitter taste in my mouth",2018-10-20 15:50:41
My CS story contradicts everything I’ve read on this subreddit,4460,cbkwp4,https://www.reddit.com/r/cscareerquestions/comments/cbkwp4/my_cs_story_contradicts_everything_ive_read_on/,756,1562814258.0,"Ive browsed this subreddit for a couple years (diff accounts) and I always see the same thing: leetcode or you won’t get a job. Salary is the most important thing.

I’ve learned the exact opposite. I had two internships, 1 at a fortune 100, no leetcode asked. Only basic OOP concepts.

Now I have a job at a major defense contractor, a job everyone on this subreddit thinks is terrible. Asked no programming questions. Only questions about my past experiences. I get great benefits, Friday off every other week, CUBICLES (open offices suck), and a 75k starting salary. The work is incredibly chill and I am learning a lot while using mid-high level programming languages.

To everyone out there on this subreddit freaking out like I did for years: this subreddit is not reality. You don’t have to be the best programmer to get a basic job. There is hope for you if you just want to work 8 hours and go home. Salary is not the most important thing. Find what makes you happy and find a job that provides those criteria.  Mine were: cubicles, 70k+, no overtime, programming language I like. That’s it.",2019-07-10 23:04:18
I am absolutely mortified and embarrassed beyond belief and I have zero idea what to do,3889,95dgrx,https://www.reddit.com/r/cscareerquestions/comments/95dgrx/i_am_absolutely_mortified_and_embarrassed_beyond/,505,1533690310.0,"Using a throw away account here. I just need to get this off my chest because I currently feel like Hitler. I haven't told anyone this irl yet because part of me is still hoping I'm asleep and this is a nightmare

I interviewed with a small start up in the city this morning. Phone screening went *incredibly* well, and I was feeling good about this place. They don't have a dedicated room for interviews, and the place was small enough that really all the engineers were just taking part of it

We were at the white board and I was drawing a diagram for a system design question. I didn't know they had an office dog. I didn't know the office dog was about 18 and the founders best friend since childhood. I didn't know the little guy (i'm talking super little, like squirrel small) liked to hang around peoples feet.

I took a step back from the board to take a look at something better and stepped on her. I don't mean stepped on her foot or something. I mean right on her proper. She gave out a heart shattering yelp and died after squirming a little bit.  I still can't fathom that this actually happened. The founder started to sob uncontrollably and I think everyone else was in just as great disbelief 

I don't know how to try and make something like that right. I don't think I could handle working there even if they did still want me. I just kind of apologized profusely and left. How do you even make up for something like that?",2018-08-07 21:05:10
"Landed my dream job, Android developer, the employer and I just signed the job offer! Bought the plane ticket, gave my two weeks! then they rescinded my job offer.",3668,a3g13s,https://www.reddit.com/r/cscareerquestions/comments/a3g13s/landed_my_dream_job_android_developer_the/,607,1544069316.0,"[US]This is my dream job, Ive wanted to make Games and Apps  since i was played 64, and Apps as soon as the AppStore became a thing. I called my family, gave my two weeks, bought a plane ticket, etc. Then the employer said they changed their minds.

Edit: hey everyone just wanted to say thank you. Im surprised at all the support I've gotten. Great community here, if im being frank, I just needed a place to complain. It was a wildly frustrating day and I work in a service industry job so i had to be polite and friendly all day when i truthfully just wanted to pout. This post, and all of you, helped me get it out of my system. Thank you all 

Edit 2: what is this, r/wholesomememes? Thank you all so much for your kindness. It's really, truly helping.

Edit 3: not going to sue. Just going to keep on improving. Thank you all!

Edit 4: airline took care of the airplane ticket. We're okay!

Edit 5: gold?? This was totally worth it.",2018-12-05 23:08:36
This sub is getting weird,3234,61di57,https://www.reddit.com/r/cscareerquestions/comments/61di57/this_sub_is_getting_weird/,278,1490439665.0,"In light of the two recent posts on *creating fake [job](https://www.reddit.com/r/cscareerquestions/comments/61b5rf/i_posted_a_fake_job_listing_to_get_a_feel_for/)/[internship](https://www.reddit.com/r/cscareerquestions/comments/61cy7v/fake_internship_posting_absolutely_blown_away_by/) postings*, can we as a sub come together and just...stop? Please. *Stop.*

This shit is **weird**. Not ""interesting"", not ""deep"" or ""revealing about the tech industry"", not ""an unseen dataset"". It's **weird**. Nobody does this — nobody.

The main posts are bad enough – posting fake jobs to look at the applicants? This is *pathetic*. In the time you took to put up those posts, collect resumes, and review the submissions, you could have picked up a tutorial on learning a new framework.

The comments are doubly as terrifying. Questions about the applicants? There are so many ethical lines you're crossing by asking questions about school, portfolio, current employment, etc. These are *real people* whose data you solicited **literally without their consent** to treat like they're lab rats. It's **shameful**. It is neurotic. It is **sad** in every sense of the word.

Analyzing other candidates is a thin veil over your blatant insecurities. Yes, the field is getting more saturated (a consequence of computer science becoming more and more vital to the working world) — who gives a damn? Focus on yourself. Focus on getting good. Neuroticism is difficult to control once you've planted the seed, and it's not a good look at all.",2017-03-25 07:01:05
Name and shame: Zillow,3183,cx75ee,https://www.reddit.com/r/cscareerquestions/comments/cx75ee/name_and_shame_zillow/,377,1567142592.0,"I recently left the worst job in my life: a software engineer at Zillow in Seattle. Do not consider working there.

It was the singlemost toxic work environment I’ve ever experienced or heard about. Some of the lowlights:

* A male manager told a female manager that her skirt was so “distracting that the meeting will grind to a halt...or grind in another direction” then made porn music sounds. He also suggested she “shouldn’t get into an elevator with any sales guys if you catch my drift”

* A manager bragged that he had had 7 HR complaints. The same manager was overheard telling someone “don’t tell HR the things I said in that meeting because less important people than you ave tried to get me fired”

* constant name calling from all my team members about each other and others in the company. One guy “is such a fucking idiot” another is an “asshole” and another a “fucking prick” and these things were said seriously and daily, also by managers, directors, and leads 

* A manager said he “hates” his employees “disability” while that employee was present 

* A senior dev would openly and angrily berate a new college grad he was supposed to be mentoring to not bother him or ask questions. “Figure it out! This is the job” and later got that jr dev fired.

* Another manager would go to lunch and get drunk 

When I put in my notice the first thing the director said was “would you stay if I could move you teams and make sure you work with different people?” So they know these issues and do nothing.

I have a lot of other toxic stories but I’ll stop there as this is long enough and hopefully saves a lot of people from ever working at Zillow",2019-08-30 01:23:12
Hiring manager checking in - you're probably better than this sub makes you feel like you are,2824,blhdf7,https://www.reddit.com/r/cscareerquestions/comments/blhdf7/hiring_manager_checking_in_youre_probably_better/,892,1557204019.0,"Sometimes I see people in this sub getting down about themselves and I wanted to share a perspective from the other side of the desk.

I'm currently hiring contractors for bug fix work.  It isn't fancy.  We're not in a tech hub.  The pay is low 6 figures.  

So far in the last 2 weeks, a majority of the candidates I've interviewed via phone (after reviewing their resume and having them do a simple coding test) are unable to call out the code for this:

> Print out the even numbers between 1 and 10 inclusive

They can't do it.  I'm not talking about getting semicolons wrong.  One simply didn't know where to begin.  Three others independently started making absolutely huge arrays of things for reasons they couldn't explain.  A fourth had a reason (not a good one) but then used map instead of filter, so his answer was wrong.  

By the way: The simple answer in the language I'm interviewing for is to use a for loop.  You can use an if statement and modulus in there if you want.  += 2 seems easier, but whatever.  I'm not sitting around trying to ""gotcha"" these folks.  I honestly just want this part to go by quickly so I can get to the interesting questions.  

These folks' resumes are indistinguishable from a good developer's resume.  They have references, sometimes a decade+ of experience, and have worked for companies you've heard of (not FANG, of course, but household names).  

So if you're feeling down, and are going for normal job outside of a major tech hub, this is your competition.  You're likely doing better than you think you are. 

Keep at it.  Hang in there.  Breaking in is the hardest part.  Once you do that, don't get complacent and you'll always stand out from the crowd. 

You got this.",2019-05-07 00:40:19
Unpaid internship opportunities are actually useful and you should apply to them.,2638,bj7bg7,https://www.reddit.com/r/cscareerquestions/comments/bj7bg7/unpaid_internship_opportunities_are_actually/,175,1556680564.0,"You can use them to practice your interview skills. If you get an offer just tell them that you can't work for them because you got accepted for a paid internship.

&#x200B;

Not only do you get back at exploitive companies by wasting their time, but you will also be able to practice what you're going to say when interviewing at a real company.",2019-04-30 23:16:04
The 5 mistakes I see candidates make the most often.,2576,a31cm1,https://www.reddit.com/r/cscareerquestions/comments/a31cm1/the_5_mistakes_i_see_candidates_make_the_most/,195,1543964069.0,"I've given 50+ phone screens in the past year and I see people making the same mistakes over and over again. There is a lot of writing out there about hard skills that are useful for interviews, but I don't see that much about strategies to help people succeed. I think most of the candidates that we interview have the hard skills to pass our phone screen, but they are nervous and don't apply those hard skills effectively during the interview. For context this is a ~100 person startup, and about 50% of people make it to the second round of our interviews.

**(1) Assuming the question has a fancy silver bullet.**

When you’re interviewing for a generalist position at a software company, it’s pretty unlikely that their phone screen is going to require you to know what a Bloom filter is (although they are quite cool) and how to use it. And yet candidates consistently scrap OK solutions that aren’t quite optimized and start diving into crazy tangents. Just like in an actual programming job, save the complex and specialized data structures for situations where their usage is clear. There’s a reason why we’re all still using arrays (and merge sort) 70+ years later.

How to fix: use standard algorithms and data structures as building blocks.


**(2) Ignoring interviewer hints and suggestions.**

This one can manifest itself in a couple ways. The most egregious is when the interviewer makes a fairly clear hint such as “what if we used a stack instead of a tree?”, and the suggestion is either ignored or dismissed out of hand. As an interviewer, I’m trying to help you! There is no situation in which people will intentionally mislead you. When the interviewer makes an explicit suggestion, they are either trying to guide you along the right path or trying to have you prove that your current solution is optimal (in which case you’ll probably already know that your current solution is a good one). Regardless of which they are doing, just ignoring the hint won’t do you any good.

Occasionally candidates will take the hint, spend a little bit of time trying to work it into their solution, and then cast it aside and return to whatever wasn’t working before (or onto a new thing). If someone gives you a suggestion and you don’t think it works that’s fine, but you should have a clear explanation for why an alternative solution is better than the one suggested to you. Remember, we’re trying to help you get the right solution and we have the answer key, so it’s likely that our suggestions are going to be helpful (not to say that people don’t occasionally come up with great solutions that aren’t in the answer key).

How to fix: give any input from your interviewer strong consideration.


**(3) Forcing a square peg into a round hole.**

This ties into the one above, but candidates will frequently pick a solution early on and tack on enhancements for every problem that it has. If your answer doesn’t feel like a clean fit for the problem, then there is most likely a flaw with the foundation of your solution, not the wallpaper. Don’t be afraid to scrap your current solution (especially if you can articulate why it’s bad) and pick a new one. The right answer is usually also a fast one, so don’t worry about time constraints on that front.

How to fix: don’t be afraid to scrap a solution and try out something new.


**(4) Diving too far into details right away.**

This one doesn’t sink candidates immediately, but it hurts them in two ways. First, once they’ve described a solution in great detail they get invested and don’t want to change it, leading to problem (3). The bigger issue, though, is that it takes more time for the interviewer to figure out that it is a wrong solution. Interviewers will typically direct you away from wrong solutions and towards correct ones, so the faster they understand your solution the faster they can put you on the right track. Since interviews are time limited, it’s better to give a wrong solution in 30 seconds than in 5 minutes. And if the solution you gave is correct, or close to it, the interviewer can always prompt you for more detail.

How to fix: get it wrong or right quickly, then iterate from there.


**(5) Filling the silence at all times.**

I blame bad advice from college “how to pass a technical interview” seminars and online advice columns for this one. It is important to let your interviewer know what you’re thinking, but just rambling is bad. The same way none of us sit down at a computer and start coding instantly when presented with a problem, it’s OK to not start talking right away when presented with an interview question. Just saying something like “just let me think for a second” is perfectly fine and can give you 30 seconds or a minute to concentrate. For the reasons discussed in (4), don’t take too long, but 1 minute of silence followed by a correct answer is a lot better than 2 minutes of talking but no good answer. A brief silence also allows candidates to gather their thoughts and then present a coherent answer, which is definitely preferable to a jumbled answer.

How to fix: still communicate your thoughts, but don’t be afraid to organize them first.",2018-12-04 17:54:29
"I trained an AI to generate /r/cscareerquestions post titles, and it said ""I am a self-taught developer at big Income.""",2427,abbgcv,https://www.reddit.com/r/cscareerquestions/comments/abbgcv/i_trained_an_ai_to_generate_rcscareerquestions/,139,1546320490.0,"Since another thread today was talking about certain trends in post titles, I figured it might be funny to train an AI on it (using [textgenrnn](https://github.com/minimaxir/textgenrnn)) and the results are pretty indicative of the subreddit.

Some highlights:

>How to go from senior devs that feeling like I'm the only way to do Our industry?  
>  
>Should I leave a CS graduate?  
>  
>Got the last mob job due to interviews?  
>  
>What is a reputation in an interview?  
>  
>Is it worth it to get a CS job?  
>  
>Does anybody have any experience with the job search?  
>  
>Does anyone else feel like a masters. What do I do?  
>  
>Is it worth it to get a job as a developer?  
>  
>I'm looking at a big company  
>  
>What makes a good manager salary bump in college?  
>  
>Best place to work in Career Fairs (Americans)  
>  
>Is it worth applying to many online coding challenges?  
>  
>Is it worth it to get a software job out of college?  
>  
>Is it worth taking a job in the field?  
>  
>PSA: I got a CS bachelors in CS and lack of job applications.  
>  
>Undergrad application process and I believe you enjoy it?  
>  
>I am a self-taught developer at big Income.  
>  
>Recruiter was just getting internships as a CS major?  
>  
>Graduating in December, American Salary  
>  
>Too early to be a software engineer?  
>  
>How do you deal with a day to day basis?  
>  
>Does anyone have any experience in the US?  
>  
>Just got a job offer after a company with a hackathon?  
>  
>Programmers who don't want to be a software engineer?  
>  
>First job out of college, and I have a bad boss... what can I do to get a job in the field?  
>  
>Can I apply for Full Time Jobs?  
>  
>Just got a raise before starting a new job?  
>  
>What’s the best way to land a job in a nightmare

More unused generated titles in this [5k title dump](https://pastebin.com/QBQTtqMx). (EDIT: [bonus 5k titles](https://pastebin.com/MSWkr8mv)!)

Good ones from the dumps:

>How should I properly struggle?  
>  
>Should I quit my job to have a chance to give up  
>  
>Is it normal to not be doing anyone else?  
>  
>Does anyone fall in the future.  
>  
>Computer science vs ethical path?",2019-01-01 00:28:10
As a new grad and students please don’t give job advice it’s so toxic,2326,a9zsq2,https://www.reddit.com/r/cscareerquestions/comments/a9zsq2/as_a_new_grad_and_students_please_dont_give_job/,544,1545950991.0,"I’ve been reading all this job advice from people on this subreddit. Don’t work at x company for y length...it will kill your resume/reputation or what not. I go on their comment history and low behold they are still taking classes in college and/or they just graduated. Why would you give advice? It’s so toxic. Like for the love of god can you stop? It doesn’t help anyone. Sorry for the shitpost/rant, but it’s caused me a lot of distress and I was stupid enough to turn down some offers/interviews as well because of these guys. I got a job now, but it’s like come on guys why. I’m basically done with this subreddit.

edit: so I wasn't expecting this much of a response...So I decided to respond myself.

To people saying I was an idiot rejecting offers based on what I read here. You guys are 100% right!!!! I was so fucking stupid, trust me my parents let me know too. Also, I have a job now so I mean luckily it worked out for me in the end. Others might not be so lucky, but that is on them.

I thought of a fix from a previous forum I used to use called Arenajunkies(RIP). It was a forum where certain subsections of it only junkies(gladiators in WoW top 1% pvpers of the current season or was it 2400 + current season and rank 1s were allowed to post)! Now you might say meadow that's a game we can't do that here and I say you are right...We can do the next best thing we can have an email confirmation of your workplace and for students their school email(make sure its a work email, not gmail/hotmail/aol...etc) and only those with confirmed work will be allowed to post in certain tags and have flairs (much like team blind/arenajunkies). I.E. Someone puts a flair on a post that says ""Senior"" only seniors are allowed to respond.

To the people that say new grads have a lot of good advice/sage knowledge about the recruiting process...Well you didn't read my post it was about job advice not the recruiting process although I guess its similar. Either way I looked up half of you and the majority of you were new grads/students go figure.

Either way I wish you guys all good luck and happy holidays. I don't expect to posting much here anymore.",2018-12-27 17:49:51
Using an Indian buffet as a networking event,2225,9rolfi,https://www.reddit.com/r/cscareerquestions/comments/9rolfi/using_an_indian_buffet_as_a_networking_event/,207,1540616496.0,"This is not meant to be a racist post. I am indian-american myself.

&#x200B;

I am searching for my first job or another internship. I ended up going to an indian buffet with my girlfriend for lunch. I went to a buffet and it was loaded. Naturally the majority of the individuals there were Indians, and they had their badges of the companies they represented. Paypal, HP, Apple, Amazon, McAffe, you name it , it was there. 

I took my chances in the buffet line looked at the badges and said oh hey you work for so and so, thats my dream company how do you like it there. I ended up walking out with 3 business cards with people willing to give me a referral.

&#x200B;

Something different, but best 13 bucks I spent for lunch ",2018-10-27 01:01:36
"Once you have experience, don't let employers treat you like shit",2138,bwp6of,https://www.reddit.com/r/cscareerquestions/comments/bwp6of/once_you_have_experience_dont_let_employers_treat/,485,1559686497.0,"I have a few years experience now as a SWE and I just want to remind everyone not to take shit from employers/prospective employers.

&#x200B;

I'll give you an example:

&#x200B;

I got a linkedin message from a recruiter, and as I am always open to new opportunities, I went ahead and applied to the job. I had a phone screen the next day and at the end I asked about salary. They told me the most they could do was about $30k under market. They then told me I would need to come in for 5 more interviews spread across 3 days. I thanked them and hung up the phone. It's actually pretty fucking absurd what some companies think they can get away with. Everything from making you jump through a million hoops to get a job, to shitty salaries and benefits, to incompetent managers.

&#x200B;

Good SWEs are in demand, so remember that and value yourself and fuck employers, they don't give a shit about you, so you owe them no loyalty.",2019-06-04 18:14:57
"I'm Steve Huffman, programmer and Reddit CEO. AMA.",2088,67bjm8,https://www.reddit.com/r/cscareerquestions/comments/67bjm8/im_steve_huffman_programmer_and_reddit_ceo_ama/,260,1493092836.0,"Hello r/cscareerquestions, I’m Steve Huffman, aka u/Spez. I founded both Reddit and Hipmunk (where I was CTO). Until about a year and a half ago, I was a full time engineer. I started programming as a kid, and worked as a developer through high school and college at Virginia (CS major). As some of you may know, u/kn0thing made a bet on Twitter with one of your mods that if you hit this subscriber milestone, I would answer all your CS career questions. Congratulations at hitting 100K subscribers, glad you’re on Reddit! And, yes, [we’re hiring](https://about.reddit.com/careers/)...

Update: I'm taking off for now. I'll check back in this evening for a few more questions. Thanks for the questions, and thanks to the moderators!",2017-04-25 00:00:36
"A HR rep asked me if I had any experience with something called ""Fy-tin""...",2074,ayep7t,https://www.reddit.com/r/cscareerquestions/comments/ayep7t/a_hr_rep_asked_me_if_i_had_any_experience_with/,395,1552006129.0,"I replied no and that I had never heard of it to be honest. She said that was unfortunate because most of their technology uses it. 

&#x200B;

I later realized she was mispronouncing Python, my main and most used language. Oh well. ",2019-03-07 19:48:49
Is anyone else weirded out by Linkedin culture?,1999,d0pxx5,https://www.reddit.com/r/cscareerquestions/comments/d0pxx5/is_anyone_else_weirded_out_by_linkedin_culture/,401,1567849427.0,"Probably a big yes from many of you and probably a dumb question, but I'm honestly not that familiar with it. I've just started getting some connections with people at the internship I was at. I've also gotten random people adding me.

What's up with this site? Why did someone I don't know congratulate me on a job update from like 3 months ago?

Then there's the generic post from a recruiter or something with a story about how the worker is all that matters, effectively pandering to everyone.

Someone made a post saying ""Thanks guys, I've just reached 5000 followers"" or something like that.

Then there's the posts of ""X years ago I failed my whatever exam, now I'm Google""

And to top it off, normal ass people I knew at my internship are liking posts like this. Why do people actually care? Do I have to partake in this shit to move up? Am I the one missing out?",2019-09-07 05:43:47
Shoutout to all the senior developers who really help and are patient with juniors,1902,bfdvyq,https://www.reddit.com/r/cscareerquestions/comments/bfdvyq/shoutout_to_all_the_senior_developers_who_really/,106,1555805772.0,"I know we often get in your way, and sometimes ask stupid questions. We know we're not as independent as we'd like to be. Just wanted to say we really appreciate your mentorship, and you've made us the developers who we are today. 

Sincerely,
Junior developers",2019-04-20 20:16:12
"No, Palantir. Your internships are not worth 5 months, 8 interviews, dozens of emails, a flight to New York, and a drive down to Palo Alto. Get over yourself before you drain the company of all its tech talent.",1892,5ncqti,https://www.reddit.com/r/cscareerquestions/comments/5ncqti/no_palantir_your_internships_are_not_worth_5/,274,1484177155.0,"I recently decided to quit the recruiting process with Palantir after having first reached out in July of 2016 and having my first interview in October. Last summer I was really excited about the prospect of working at Palantir--cool tech, smart people, sick perks. After 2 phone screens, 3 onsites in NY, a hiring manager interviews and dozens of emails back and forth with recruiters I got a call offering me the ""opportunity"" to do even more onsites for the Forward Deployed Engineering role.

During this time I also found two separate internships, one at a breakout list company and another at Google. I took both offers (I had two off terms from school essentially) and am currently working at the breakout list company. Yet, here I am in January talking to Palantir still and being asked to do more interviews. Finally I said enough, no tech internship could possibly be worth what would be 8 interviews or more if I kept going.

This made me seriously consider though, how does Palantir get good talent if they have such a horrible recruiting process?

I'm asking this question because I thought maybe I was an outlier, but heard of several people with similar experiences. My perception of Palantir has been drastically reduced through this process. I told my recruiters via email about already finding internship, being stuck in the recruiting pipeline for nearly five months, and how I was not willing nor had the time to interview as I'm working now. She just recanted the same things as before about wanting to find a good fit for me, how that takes time, and asked me to do more interviews.

Not only is the recruiting process awful, but I think a company would have to be seriously delusional about its status to think that 5 months and 6 interviews later I'll take a day off of work from my current internship to take the CalTrain down to Palo Alto and do some brain teasers on a whiteboard so that maybe I can get another hiring manager interview for a role as a glorified customer support engineer that I didn't actually want in the first place.

How in the world does Palantir stay competitive thinking like this? Is there still any hype for Palantir from top engineering talent? 


I wholeheartedly regret even starting this process of applying to Palantir as it's been a huge time and energy investment and I have absolutely no closure--I didn't get rejected, I didn't get an offer, I just walked away. 

If you've had a similar experience with Palantir I'd love to hear about it and what you did. I'm also interested in what anyone who has had a positive experience being recruited or working at Palantir has to say. ",2017-01-11 18:25:55
Leetcode style questions to ask in an adult film,1892,azpo3m,https://www.reddit.com/r/cscareerquestions/comments/azpo3m/leetcode_style_questions_to_ask_in_an_adult_film/,126,1552312096.0,"Not sure if this is the appropriate subreddit, but my friend and I were looking to make an adult film.  The premise of the film will be that someone is giving a white board interview to another person.  Does anyone have any ideas for some inappropriate leetcode questions, or just programming innuendos in general?  I apologies if this is the wrong subreddit for this question, and I swear I am not trolling.

&#x200B;

Edit: Thanks for the overwhelmingly positive response!  My friend was a little on the fence about doing this, but I sent her a link to this post and after seeing all your suggestions she is very excited to make the film (still couldn't get her on board with dp...but 3sum might be in the cards)  Since we are both students, we probably won't have time to make the film until spring break or after the semester, but I will try to update all of you when it is done.",2019-03-11 09:48:16
5 pieces of advice I wish I had known before taking random CSCQ advice,1893,buezmv,https://www.reddit.com/r/cscareerquestions/comments/buezmv/5_pieces_of_advice_i_wish_i_had_known_before/,265,1559166992.0,"A very hypocritical short list by a new grad who is probably talking out of her ass.

1. **People don't know shit.** Everyone's situation is different, and if someone tells you to always follow some rule, or you have to do x y z,  they're idiots.

2. **Have a life outside of CS.** Seriously. Have hobbies (gaming! hiking! underwater basket weaving!), have friends (even - gasp - your coworkers can be your friends! If they're competitive then yeah dump them but yeesh). Have things that bring you joy, and preferably spend some time away from screens.

3. **Take care of yourself.** Mental health is so important especially since burnout seems to be more and more common. I worked myself into the ground during grad school and it is 10x harder to get out of a hole you've dug for yourself than it was to get there, at least in my experience. 

4. **Listen to audiobooks when you want to!** I've found it's great for forcing me to go outside if I only allow myself to listen to a good book if I'm going for a walk, run, etc. But like, you don't need to be constantly learning or improving yourself (unless you want to, and have the energy!), that's a recipe for burnout. No need to do a thousand leetcode problems a day. 

5. **Be good to one another.** Tech can be really toxic and competitive. Build people up, don't tear them down. Isn't that why we're all here on this sub? To help one another with our careers?",2019-05-29 17:56:32
"I'm 22, I haven't applied to more than 20 companies in my life, and I have 6 SWE/intern positions under my belt, and I wanted to share some tips",1849,bgxgu6,https://www.reddit.com/r/cscareerquestions/comments/bgxgu6/im_22_i_havent_applied_to_more_than_20_companies/,432,1556155876.0,"I read a lot about people applying to 300 jobs and getting like 2 callbacks, but I had a very different experience. I wanted to share some of my tips that I've learned.

1. I never applied a ton, I had connections. In college I joined a professional fraternity and 4 out of the 6 jobs I got were through people I knew who worked there. You get your resume handed right to the manager instead of through HR. I recommend making friends with people in your class, or finding somebody else with a strong network and free-loading off of theirs (and buy them lunch or something). Furthermore, people you know there can give you invaluable advice on what is going to be on the interview/what the hiring manager is like, etc.
2. I made friends with the ""CS gods"" who were role models in my class. Then, I just ask them for their resume, for them to look at mine, for their advice, their compensation and negotiation tactics, etc. It's not like the med field where other people want the competition to fail, I rarely meet any SWE who DOESN'T want to help others get a job.
3. Even when I cold apply, NEVER apply on the website, there's too many people that do that. Instead, I find a recruiter on Linkedin, I find their WORK EMAIL with this extension (https://connect.clearbit.com/), and I email them DIRECTLY with my resume, my interest, and a blurb showing that I've researched the company.
4. (only applies to US citizens) This sounds shitty, but if you have an asian sounding name and you ARE a citizen, put that you're a citizen on there. Some recruiters will toss resumes JUST because they're asian and the company can't sponsor, even if you are a citizen. I literally put ""US Citizen"" next to my phone number, linkedin, and github.
5. Interviewing is honestly all about confidence. You have to be a salesman. You can't just be good at coding and suck at talking, or vice versa. I don't really study that much the day before an interview (that's for the weeks before), I just go on walks, run, do jumping jacks, get my blood flowing so that I feel the most alive I can be before stepping in to the room.
6. credit to u/Chewbahka72, but if you don't have experience just apply to smaller companies, instead of FB/Apple/Google/MSFT. There's a reason those companies pay so well, it's cause everybody has tons of experience, it's ok to start at smaller companies where you can get good tech experience without the cool free food benefits and the company jerking you off while you work.

Let me know if you want me to take a look at your resume or anything!

**EDIT: RESUME TIPS:**

I got some PMs about resumes, I'll take a look at them but here are my tips for resumes:

1. Don't use Arial, Calibri, Times New Roman. I know this might be an unpopular opinion, but if you want to get a job (esp. in Silicon Valley), make it unique. DO put some interest in design. I'm not saying make the whole thing in LaTeX or get Elon Musk to lick it before applying, but try some different fonts and dear God learn to right justify text on the same line. (https://fonts.google.com/) (https://fontawesome.com/?from=io - for LinkedIn, github, email, phone# icons). I use Open Sans and Raleway
2. Use PROBLEM, SOLUTION, IMPACT. Indicate the PROBLEM you're trying to solve, then indicate how you SOLVED it (what language, framework, architecture, system, design), and then talk about IMPACT (financial - saved $42069k, operational - less people needed to do this task now, time - saved 20% time on this operation). Here's an example: ""Built a batch utility using Java, SQL, Hibernate to automate self-checking of the business's pricing processing system (SOLUTION), allowing the business to catch failed charges due to temporarily failed downstream services (PROBLEM mixed with a little bit of SOLUTION), which in one instance saved the company $2000 in revenue leak""
3. Split up your skills into LANGUAGES and FRAMEWORKS/TECHNOLOGIES. Languages: Java, SQL, Python. Frameworks/Technologies: React, Redux, git, AWS, Docker
4. Bold text that is important, make text lighter or smaller for text that is not important. IMPORTANT: Company names, Job title, headers. NOT AS IMPORTANT: employment durations, project times, company locations
5. Just find a good-looking CS resume online or from a friend and copy the formatting. MS Word is honestly enough for the vast majority of cases.

**EDIT 2: Here is my anonymized resume:**
https://i.imgur.com/VpPK5G3.png
Not all my experience is on there, I put what I thought were the most valuable ones. I want to highlight that my resume doesn't have the biggest names on there in terms of company names, but I do think it is a strong one due to formatting, design, and wording.

**EDIT 3:** I had 4 internships in school (1 per summer, 1 in part time) and 2 full-time positions already, sorry for the confusion",2019-04-24 21:31:16
Rejected by Palantir 30 seconds after I filled out their demographic survey and self-identified as Asian male,1852,9mvjqz,https://www.reddit.com/r/cscareerquestions/comments/9mvjqz/rejected_by_palantir_30_seconds_after_i_filled/,436,1539167149.0,"I applied to Palantir several weeks ago and completed their coding challenge on hacker rank. Tonight at 9:32 PM I received a Demographic survey that asked me to identify my gender, race, veteran status, and disability. I answered male, Asian, not veteran, and no disability. I responded at around 9:34 PM, and I jokingly told my friend that Palantir would reject me in 30 seconds after I told them I am an Asian male. Worked like a charm. At 9:36 PM I received the rejection letter.

I live in the same time zone as their headquarter, so either someone is working at 9:30 PM on a Tuesday night, or they are automating the rejection letter. So I really have to wonder if they rejected me based on my answer to the demographic survey. I have no proof and there is the possibility that the two emails are totally irrelevant. But out of all the possible time they can send me the rejection letter, they chose to do it exactly a minute after I filled out the survey at 9:30 PM? I am really salty right now. Am I being discriminated against? What do you guys think about this?

&#x200B;

Edit: thank you guys for the support. Coincidence or not, I can always do more leetcode and become an actual genius. Good luck on all of your job hunts.",2018-10-10 06:25:49
"Graduated with a 2.4 GPA 1 year ago. After studying my ass off, I now have offers from 3 of the Big X. Here’s how I did it, and perhaps how you could too. Detailed stats included.",1829,9i0pow,https://www.reddit.com/r/cscareerquestions/comments/9i0pow/graduated_with_a_24_gpa_1_year_ago_after_studying/,360,1537660575.0,"******
Note: It's been brought to my attention that this post has been mentioned in a [Joma Tech video](https://www.youtube.com/watch?v=YGflHj1SjA4) on Youtube and it appears that Joma has gotten my post mixed up with the [2.9 GPA post](https://old.reddit.com/r/cscareerquestions/comments/6278bi/my_journey_and_tips_29_gpa_at_a_noname_liberal/) by u/elliotbot. Just wanted to clarify that we aren't the same person and the person being interviewed in the video is u/elliotbot and not me :)
******

When I graduated a year ago, I failed all my interviews with the Big X even after grinding through about 200 leetcode questions. So I decided to try something different with my new wave of studying a couple of months later while I was working as a software engineer at one of the companies I did get an offer from (enterprise software company). 

I started out by doing some research on how to effectively learn, and found a relatively well known and free online course called [Learning How to Learn](https://www.coursera.org/learn/learning-how-to-learn). The course is rather short and only took me about 8 hours to go through, but what I learned from it was a huge help.

After completing the course, I decided to use this free promo code for interviewcake that I got from a hackathon and went through about half of the problems on that website (did about 20 problems). Most of them problems were ones I’ve already seen on leetcode, so it was more of a warm up / review. One thing new thing I did was to write down each problem I did in a google sheets document along with the date I solved the problem (linked in the bottom). I would then review the problems I did for the past week to make sure I didn’t forget how to do them. This was a tip I picked up from the online course -- the power of recalling + spaced repetition.

Next, I grabbed a copy of Elements of Programming Interviews in Python (if you’re going to buy it, make sure to check [their website](http://elementsofprogramminginterviews.com/) to see how to get the latest version and also use their free command line judging tool to check your answers). I also learned python specifically for interviewing because of how concise the language is, meaning you could write your code much faster, which I think played a notable role in my interviews. I started going through EPI’s study guide mentioned in one of their intro chapters that had a list of recommended problems. I decided to go with EPI because I’ve already gone through 200 leetcode questions, but I wanted to read the more in depth explanations that EPI had and learn how the book explains the solutions to problems so that I could pull off something similar when explaining / solving problems in interviews. I ended up solving about 2/3s of the problems that were in the study guide.

By this point, I felt ready to start interviewing. At least for the little guys. So I started mass applying to companies that I was only mildly interested in, saving my top choices like the Big X for last, as I would be more prepared for those interviews after prepping more with both the practice problems and with actual interviews with the companies I am less interested in.

I got a massive number of rejections (see the second to last paragraph for stats). But every once in a while, I did get an interview too and I made sure to utilize them. I should mention that with one year of experience, I was applying to mostly entry level positions, but if a company didn’t list any entry level ones, I applied to more senior positions, whether or not I qualified for them. I did get a few interviews for those senior positions btw. I had about  2 or 3 interviews a week for a couple of weeks from this.

After doing about a dozen interviews, I started feeling more confident and was ready to start applying to my top choices. This is where I started using leetcode again. I got the leetcode premium subscription for a month to practice tagged questions for specific companies I was interviewing for.

Finally, it was time for the Big X interviews. I took two weeks off from work and scheduled all of my Big X interviews to take place in these two weeks. There were several leetcode questions of varying difficulties that were presented, some I recall from EPI as well, but also a go
od number of questions that I’ve never heard of. Nevertheless, after being exposed to so many problems and working through them, you’ll start to get a feel of how to approach most problems. I definitely didn’t ace every single interview. There were several interviews where there was plenty of room to improve my solutions, even some that I didn’t finish coding up the solution for. But I made sure to explain every detail of my thought process. Try to keep talking. Vocalize everything you are writing on the whiteboard. Draw examples. I’m sure you’ve seen a lot of these tips, but ultimately, the most important factor was just to practice enough to the point where you can tackle almost any problem thrown at you. Do a lot of different type of problems. Review them, and thoroughly understand them.

[Here are all the problems I worked on for this wave of studying](https://docs.google.com/spreadsheets/d/1ciClTiWWmrDL6sFnNWJj0dga2BC3x0l44tkvaAfkQo4/edit?usp=sharing), which I reviewed via recalling, religiously. Problems prefixed like “14.4 <problem name>” are from EPI chapter 14 problem 4 (mapping depends on book version). Problems prefixed like “128. <problem name>” are from leetcode. The others are from various sources, such as interview cake. 

In the end, I received 5 offers (3 from the Big X), and about 100 rejections (individual companies, if it was just applications then more like 300 rejections), including the companies I never heard back from. I did a total 11 onsites and 23 technical phone screens where I had to code. I also tracked every minute I spent studying and for this study wave, I spent 130 hours. For the previous wave about a year ago where I was primarily grinding leetcode, I spent 275 hours. 

Feel free to ask me any questions you have and I will try to get back to everyone, at least eventually. Hope this helps!",2018-09-22 19:56:15
My journey and tips: 2.9 GPA at a no-name liberal arts college with 1 mediocre internship —> 4 FTE offers including FB,1782,6278bi,https://www.reddit.com/r/cscareerquestions/comments/6278bi/my_journey_and_tips_29_gpa_at_a_noname_liberal/,314,1490829302.0,"Since I've gotten so much from this sub, I wanted to see if I could give back a little and share my story / random tips. Hopefully it helps some of you out there. There was also some interest in my [preparation strategy while employed](  https://www.reddit.com/r/cscareerquestions/comments/622ceq/employed_engineers_how_do_you_allocate_time_to/dfj7tj5/).

**TL;DR:** 

graduated from a no-name liberal arts college 2 years ago with a sub-3 GPA and 1 internship at a small local non-tech company; went to work for a large ""unprestigious"" fintech company, then an unknown startup; got a few hits from Big 4 recruiters but always fucked around preparation-wise and never converted an onsite; FB recruiter messages me in Feb. and I decide to go all-in; studied ~150 hrs in 1 month+ with a full-time job and landed 4 offers out of 8 onsites (didn't go to 3 onsites).

**Disclaimer:** 

I am not claiming that FB or any Big N or unicorn or w/e is the be-all end-all of companies. I'm not interested in debating whether they're overrated. This is aimed specifically at people who might be interested in pursuing these sorts of roles, and especially at people who don't think they can ""make it,"" because of background, etc. I'm also not claiming this is a fully general solution. This is just my journey and what worked for me—hopefully it will prove a little bit useful for you.

Edit: I want to reiterate that I realize my school and GPA didn't get me into FB, but that my experience and interviewing did. I got in *in spite of* my school and GPA. My title is phrased as it is because of all the questions people ask on this sub about whether not going to a target school and not having an impressive internship *forever* precludes you from working at a Big N or unicorn. Clearly, I don't think so and I aim to provide some context and motivation to those who can relate. If that's not you, then hopefully the resources and tips are otherwise helpful. (Also quibble with the idea that 2 years out of UG counts as that experienced.)

**On prestige whatever tf that means:**

I see a lot of questions on here about whether it's necessary to go to a top whatever school, or whether you're screwed if you go to a public school or a no-name school, or ""will i ever make it to GOOGLE if i don't go to Stanford!?"". The short answer is: no, it's clearly not necessary, but of course it helps. My school was so small (less than 10 CS majors in my graduating class) that we didn't even have a career fair, let alone tech company recruiters visiting.

What that means is that you kinda have to make your own path. You have to do the typical side project shit that's recommended here all the time, but may also have to do a bit extra in terms of networking (few of my classmates now work at a tech company, let alone a startup or big N), keeping up in tech (reading blogs, HN, etc.), learning (MOOCs, small exploratory side projects), and your resume/Linkedin/Github.

Other things I did to try to set myself apart were taking the initiative at work and putting myself on projects that worked on ""hot""/trendy techs (cloud, big data, ML) and maintaining a relatively polished resume and the like. Even when I didn't have an interesting project at work, I tried to keep myself busy with staying up-to-date and not letting my skills atrophy.

Re: Linkedin/Github, I got my previous job at a startup through Linkedin, as well as my current job at Facebook. Definitely don't underrate it. I also had an interviewer at a Microsoft onsite specifically mention checking out my Github.

**On imposter syndrome, learned helplessness, and failure:**

Last fall, I was contacted by Google and Amazon. I halfassed an absurdly optimistic study plan, lucked my way through to onsites, and then failed miserably. And I mean failed. I didn't even code a brute force solution to at least 3 problems. It was brutal.

The issue was, I was scared of failing. Scared that I might do my best, and yet still fail. It was a lethal combination of learned helplessness, imposter syndrome, fixed ([vs. growth](http://www.aaronsw.com/weblog/dweck)) mindset, and self-destructiveness. If I didn't *really* try, and failed, well, maybe if I had *actually* tried, I would've gotten it! My precious ego was protected. My self-identity was safe.

In practice, what that meant was that I skimmed CTCI, did a couple Hackerrank problems in an IDE, read up on some algorithms and data structures on Wikipedia, skipped any problems that looked scary or intimidating (all Leetcode mediums+ and literally every single graph or DP problem), and convinced myself that practicing whiteboarding was a waste of time.

Now, I know this sounds pretty dumb. But I also know this resonates with at least some of you. Don't fuck up like I did. If you truly want it, go after it and actually commit. Fuck being scared of failure. Don't preemptively discount yourself.

**On obsessive studying:**

In February, I got a message on Linkedin from a FB recruiter asking if I was interested in applying to a Data Engineer role. I said enough was enough and decided to go all-in. I wanted to see what I could do if I truly applied myself 100%. I didn't want to regret not having done all I could.

I wrote up a study plan and schedule, resolved to study about 3.5 hrs a weekday and 7 hrs a weekend day, read a bunch of motivational stories (like this one aspires to be), told my friends and SO that I'd be a shut-in for the next month, and hit the books. I kept track of [all the time I spent studying](http://i.imgur.com/vAtIJqp.png). I trusted the process. And it worked out.

As I expected, the first week was a struggle. I was getting lost with Leetcode easy problems. Wtf was a trie again? Etc. During this time, I also wanted to up the stakes and not ""waste"" my preparation, so I cold applied to a ton of roles. Probably over 150. I went through [the easy application list](https://github.com/j-delaney/easy-application), cmd-clicked every company I recognized, and applied to any and all relevant roles.

**On study materials and studying tips**:

DS&amp;A:

* Leetcode
* Interview Cake
* the Algorithm Design Manual
* [Arden Dertat's list](http://www.ardendertat.com/2012/01/09/programming-interview-questions/)

System Design:

* [High Scalability](http://highscalability.com/)
* [System Design Primer](https://github.com/donnemartin/system-design-primer)
* [Hired in Tech](https://www.hiredintech.com/classrooms/system-design/lesson/55)

SQL and data modeling:

* [Mode Analytics SQL tutorial](https://community.modeanalytics.com/sql/tutorial/introduction-to-sql/)
* [Kimball's The Data Warehouse Toolkit](https://www.amazon.com/Data-Warehouse-Toolkit-Definitive-Dimensional/dp/1118530802)

I did 76 problems on Leetcode, about 75% easy, 25% medium, and a few high frequency hards. Did all of the Interview Cake problems. Had already gone through CTCI, so just skimmed it. Whiteboarded ~25 problems in total in detail (drawing test cases, iterating through multiple solutions, talking out loud about algorithmic logic and time/space complexity, etc.). Did about 5 complete mock interviews with my GF (including the ""talk to me about your background"" elevator speech portion).

Interview Cake is pricey, but the cost/benefit analysis made sense for me. I focused a lot on quality over quantity, and it was a good fit there (big fan of the hints and iteration from brute force to ultra-optimized). The feedback from phone and onsite interviews was that I did a great job communicating my thought process and talking through efficiency and test cases.

Another thing I got good feedback on was my level of engagement. Prior to every interview, I looked up all my interviewers, any engineering blog posts, recent company news, etc. This made it easy to ask things like, ""I was looking at the recent announcement from [YOUR AMAZING COMPANY], how do you feel about it?"" or ""I saw that blog post your team did on BigQuery, what were some of the challenges you guys faced in refactoring your pipelines?"" I can't objectively back this up, but I do feel like this aspect is both overlooked and low-hanging fruit. (Plus, shouldn't you be curious about your future company?)

**On stats and other interviewing process details:**

First contacted by Facebook on January 18th. Signed their offer on March 28th.
148.5 hours spent studying from 2/10 to 3/18. Avg: 4.13 hrs/day.

8 onsites: FB, Microsoft, Yelp, Twitch, Venmo, Foursquare, Indiegogo, Capital One. Didn't go to onsites at Capital One (wasn't too interested), Yelp, and Twitch (latter 2 happened after FB offer). Converted 4 out of 5 (not Microsoft; was a general SDE role).

Overprepared for my onsites with the exception of Microsoft (should've done more Leetcode hards) and FB (should've practiced more on SQL window functions and pivot tables). If I had studied more efficiently, I probably could've gotten away with 50 hours. But it was worth the peace of mind, especially since I wouldn't get another try for at least half a year.

Traveled to 5 onsites in the span of a week ([schedule here](https://www.reddit.com/r/cscareerquestions/comments/61e0t1/how_do_people_get_so_many_offers_at_once/dfe3ra4/)).

Talked to / interviewed with about 20 companies at the ""peak."" Some ghosting on both sides, some rejections on both sides. (Somewhat funny, mostly infuriating ghosting story: AWS S3 recruiter wanted me to apply, we set up a phone coding interview, the day of the interview was the day of the S3 outage (:/), nobody called, recruiter said sorry they were super busy (understandable), some phone tag, I emailed another follow-up, complete radio silence.)

Received 3 takehome coding assignments. Didn't do 1, converted 1 of the remaining 2 into an onsite and offer. Spent about 20 hrs total on the assignments.

Negotiated my offers a little with the help of [Haseeb's blog posts](http://haseebq.com/my-ten-rules-for-negotiating-a-job-offer/). Added about $25k to my total comp. If I had another big N offer, I think I could've done better on this front with FB. Ended up with a package totaling ~$185k.

**On useful lists:**

When interviewers asked if I had any questions, I stuck with a bank of questions that I believe went over really well:

* What first attracted you to [AMAZING COMPANY] and what has helped keep you here over the years?
* What are some challenges your team is currently facing?
* What are you most excited about regarding the future direction of [AMAZING COMPANY]?
* Walk me through the development workflow/process: do you guys do scrum or standups? Pull requests? How are tasks determined and assigned?
* What are some projects I would work on in my first 90 or 180 days here? 
* What did you work on when you first got here, or alternatively, tell me about the project you're most proud of?
* (to hiring managers/VPs/directors) When you think of a successful software engineer at [AMAZING COMPANY], what are the most common traits that come to mind?

My mostly sorted list of heuristics I would go through when stuck on a problem:

* Always consider hash tables (dictionaries) with their O(1)-ness. (""Tip: using a dictionary is the most common way to get from a brute force approach to something more clever. It should always be your first thought."")
* If at all array-related, try sorting first.
* If search-related, consider binary search.
* Start with a brute force solution, look for repeat work in that solution, and modify it to only do that work once.
* Space-time trade-off! That is, for better time complexity, try using auxiliary data structures. E.g., do something in a single pass over an array—O(N) time—by using a hash table—O(N) space—vs. doing something in multiple passes—O(N ^ 2)—without using any extra space—O(1). What information can I store to save time? (Another example: O(1) get_max method for a Stack class stores extra information (the max at and below each element) to save time (instead of iterating through the stack O(N)).)
* Try a greedy solution:
Iterate through the problem space taking the optimal solution ""so far"" until the end.
(Optimal if the problem has ""optimal substructure,"" which means stitching together optimal solutions to subproblems yields an optimal solution.)
* Remember that I can use two pointers (e.g., to get the midpoint by having one pointer go twice as fast, or in a sum problem by having the pointers work inward from either end, or to test if a string is a palindrome).
* If the problem involves parsing or tree/graph traversal (or reversal in some way), consider using a stack.
* Does solving the problem for size (N – 1) make solving it for size N any easier? If so, try to solve recursively and/or with dynamic programming. (Using the max/min function can help a lot in recursive or dynamic programming problems.)
* A lot of problems can be treated as graph problems and/or use breadth-first or depth-first traversal.
* If you have a lot of strings, try putting them in a prefix tree / trie.
* Any time you repeatedly have to take the min or max of a dynamic collection, think heaps. (If you don’t need to insert random elements, prefer a sorted array.)

**On weird things I did:**

I used moda to help me stay focused and study. Wasn't necessary, but it did help (big YMMV disclaimer here). Didn't use it on the day of any interviews because I didn't want to make myself more nervous/anxious.

I copied over all the solutions I wrote for Interview Cake and most of the Leetcode mediums and high frequency / notable easy problems into a local directory and pushed it to Github. I then concatenated all these files and printed it out. Took the stack of solutions with me when I was traveling the final week and looked it over on flights, etc. Basically just priming my pattern recognition.

**On concluding:**

If you made it here, I'm impressed. I'm sure there's more I could write or that I forgot to include, but for now, that's it. Ask me any questions you have and I'll answer every one!

Also let me know if there's interest in my open-sourcing my pretty comprehensive Workflowy study guide.

**Edit:**

Overwhelmed by the response, and thank you very much for the gold! I will clean up my study guide a bit and link it here within the next day. 

Feel free to continue asking questions, and if I missed yours, definitely remind me! 

**Edit 2:**

My study guide is still quite messy, but I didn't want to procrastinate and let the perfect be the enemy of the good, so here it is: https://workflowy.com/s/wGqavcPQFm

Hope it helps, and if you have any improvements, please tell me.

Also, if people want to open-source it for real and somebody knows of an easy way to turn a Workflowy note(book) into a Github repo, please let me know :)",2017-03-29 19:15:02
A tip based on my experience: your interpersonal skills are probably more important than technical ability for career development,1772,c26zp4,https://www.reddit.com/r/cscareerquestions/comments/c26zp4/a_tip_based_on_my_experience_your_interpersonal/,256,1560916586.0,"Given the proliferation of Leetcode-style interviews that completely ignore soft skills, I think it's easy for many entry level folks to develop the notion that as an IC the most important thing for their career advancement is just their sheer technical ability and knowledge.

This is important, no doubt. However, based on my experience (7ish years), technical ability rapidly becomes outranked by your interpersonal skills, especially as you become more senior (either on an IC ladder or management ladder). Rarely have I seen someone be fired or seriously reprimanded because of their technical work. But I've seen people denied promotions, demoted, pushed out of important projects, stripped of a private office, or fired because they were hard to work with, had bad attitudes, relied way too much on institutional authority, or were just assholes.

""Interpersonal skills"" doesn't mean you need to be extroverted or that you need to go to every Happy Hour or stuff like that. It means you need to build a reputation as someone who's easy to work with, someone who gets important work done without causing drama, someone who uplifts others and is a positive presence in the room. This will help you regardless of whether you want to go into management. Senior technical engineers are leaders too and have to lead by example. If you're hard to work with, you'll set the example of what *not* to do, which is a great reason to not promote you or give you very visible work.",2019-06-18 23:56:26
[Update] Recently hired CTO has made dev a living hell. What can i do?,1741,6r9se9,https://www.reddit.com/r/cscareerquestions/comments/6r9se9/update_recently_hired_cto_has_made_dev_a_living/,314,1501761272.0,"Original post: [Here](https://www.reddit.com/r/cscareerquestions/comments/6pmiq6/recently_hired_cto_has_made_dev_a_living_hell/)

I ended up sending an email to our CEO basically outlining my concerns, and CC'ed a bunch of people. I did my best to write it in a neutral way. When i didn't get a response, i ended up sending an email to our previous CTO, asking for advice/recommendations, he responded instantly and sympathized but wasn't really in a position to do anything about it. Our CEO still has yet to even acknowledge the email, and i have more or less completely given up. 

I ended up going to lunch with one of team leads who i used to work with, and basically spent the entire time complaining about work. He offered me a job as a senior software developer at his new gig, and basically took me to meet his CTO, where we did a quasi interview. Who then offered me a job on the spot. Basically a nice salary raise, no real change in my commute (its right down the street), and the same benefits. 

The biggest problem for me, however i feel painfully loyal to current company. I have watched it grow from it being 4 people in a tiny room, to over a hundred people. Thankfully i told him i would think about it when they sent me the offer.

On Friday, my CTO basically told me i needed to buckle down with my team and get Feature X done by Monday because apparently she wanted to demo it to a potential customer. Feature X is something she has been hinting at wanting us to do for awhile, however the bitter reality of it is, it simply isn't feasible to do at scale. This feature was not in our sprint nor was it something that could realistically even be remotely completed in 3 days. 

I argued with her, and it all came down to ""I don't want to look bad when i promised the potential client feature X, so figure it out"". This made me so so angry, and pushed me over the edge, and gave my two weeks notice.

Last weekend was the single best weekend i have ever had in ages, i did no work. I didn't worry, or panic about deliverables. I came in monday told our CTO that no feature X isn't done, and i didn't make my team work all weekend on it. On Tuesday i was terminated for apparently not being a team player. 

Next Monday i start my new job, and aside from the fact i feel pretty disappointed by the fact that our CEO doesn't seem to care that dev is bleeding talent. Tomorrow i am going camping to unplug, and i honestly couldn't care less about what happens to my old company. ",2017-08-03 07:54:32
"Hate your job? Here's how to quit with nothing lined up, from my experience.",1730,9tkgt0,https://www.reddit.com/r/cscareerquestions/comments/9tkgt0/hate_your_job_heres_how_to_quit_with_nothing/,252,1541196950.0,"This gets asked every now and then and I think it'd be good to have a summary of advice that pops up when someone searches for it. This is specific to our industry, so if you're not in tech, this may not apply to you!

So first and foremost: **do not quit your job unless you have reached the absolute breaking point!** I reached this point when my manager put me in a surprise meeting with HR and handed me a warning for something asinine like I was a child caught in the hall without a hall pass.  I already hated my job and this was way more than I could handle without my mental health further deteriorating. 


That being said, **if the economy is not good, under no circumstance, bar illegal or severely unethical practices, should you quit your job**. I would not have put in notice if I didn't know I could get a job within a few months. If we were in recession, I'd have just bent over and taken it. **Its easier to get a job when you have a job.**

So, with that out of the way, here are my tips based off my experience:


1. **Ensure you have at least 2 - 3 months of expenses covered.** Ideally you want at least 6 months. This does not include any money you have in a retirement savings account, and ideally no investments or bonds. Of course these should be liquidated in an emergency, but that should not happen if you have enough saved up to begin with. *If you have a lot of money saved up*, I would take the advice below on a less urgent timescale, to reduce the chances of burnout, or ending up in another crappy company.


2. **The moment you give notice, you're basically unemployed.** Your income is limited. So act like it. Cut out all non-necessary expenditures.


3. **You're allowed to give more than two weeks notice** (though be aware they can kick you out anytime after you give notice). As much as I wanted to leave, I wanted to have a job while applying to jobs, because it's easier. I also wanted to have a bit more financial security. So I gave a month's notice. I figured that'd be enough time to find a job, and if not, at least I have an extra month of finances. **You're also allowed to quit on the spot and leave immediately**. (In an at-will employment region!) Just make sure you're financially prepared for that. Know that you will have a somewhat tougher job hunt.


4. **Apply to jobs like its your job.** I applied to ~50 jobs in the span of two days. My metrics we're: *Above a 3 on Glassdoor*, and, *I had at least a passing resemblance of qualification for the role* (and in NYC/NJ, where I'm based). If you don't live in a hub, be prepared to move, or lower your standards immensely. And if you don't have a wealth of money saved up, **you cannot be picky**. I took the first offer that came, which luckily was at a great place.


5. **If you still have your job, do not mention you already gave notice!** This should be obvious, but do not tell anyone you already put in notice. That's a ""later"" problem. If your job ends and you're still in the process with others, tell them. At least you'll have your foot in the door already.


6. **Study like crazy.** You can't really afford to fail interviews. You will! But try to reduce that chance. I didn't grind leetcode but I studied every gotcha in the book for Java and JavaScript, and knocked down all the fundamentals for any frameworks listed under ""Advanced"" on my resume. Essentially, I could answer most questions about any language or framework I claimed to know well, and trust me, it paid off. If you're aiming for places with more Google-like interview processes, sorry but you'll need to grind leetcode and brush up on CS101 concepts. That's just a fact. There are plenty of places that won't ask you about data structures and algorithms, or give you 'fun' riddles to solve. There are plenty that will. Also, when entering a technical or behavioral interview, make sure you study enough to at least understand everything they've put on the job listing. For example, you may not know what R is, and no, you don't need to become an expert overnight, but you should have an idea of its purpose. Companies understand candidates don't know everything, and you shouldn't pretend to, but it's better to at least say ""Never used it, but I know it's for this"" than ""I have no clue what that is"".


7. **What are they gonna do, fire you? Your full-time job is on the backburner if you still have it.** Schedule those interviews during the day. Disappear for ""doctor appointments"" or ""long lunches"". You'll need your laptop and I hope you know how to enable mobile hotspot on your phone. Know the quiet rooms in your office and book them. Obviously *don't completely disregard your work*, unless you hate your teammates as well, then, go ahead. On my busiest days I did 1 hour of actual work, and 7 hours of interviews and phone screens, with a 15-30 min break between each. When I had an onsite, I just used my time-off. If you don't have time-off, then sadly you will need to use sick days or unpaid time-off. **If you're unemployed already you'll have even more time to handle interviews.** Ideally from 9pm - 6pm every weekday should have at least one interview or phone screen scheduled.


8. **Managing take-homes.** Take-homes have become more common. Unfortunately it seems some companies do not realize candidates applied to more than one job. Some take-homes take an hour, others could take 12+ hours. Inform companies that you need more time if they give a deadline you can't do. If you're drowning in take-homes (I was!), take a break in applying, and schedule interviews further apart, so you have time to complete them. You aren't in a position to reject take-homes, so you'll need to find some system that works for you to handle them. If you're feeling ballsy, ask if theres an alternative to a take-home, like a round of code-pairing.


9. **Take breathers.** This sounds counter-productive, but you will burn out if you don't give yourself time to relax. I nearly burned out after having back-to-back interviews and doing a take home that took three days of spare time. You need to have energy to do interviews, so burning out needs to be avoided. I also took breaks from applying, as I was already getting enough hits in my email.

10. [EDIT!] Big tip: If you quit your job for what could be construed as constructive dismissal, or due to some form of discrimination, you can be entitled to unemployment. Just because you quit does not automatically mean you're disqualified. Look into your region's policies on applying for unemployment.


Aside from those, I was applying to Frontend, Full-Stack, Backend, and General Software Engineer positions. Of the applications I sent, I got a phone screen from about ~40%. This would probably have been higher if I had been at my current job for longer than 6 months. It also may be higher or lower depending on your current/most current role. I secured a job in two weeks, which honestly, is shockingly fast. I would expect closer to 4-8 weeks. **But you should expect to be unemployed for at least 3 months** even if, realistically, you should be able to find a job in about a month.


In the end, I would say that doing this was ultra-stressful for me. But it was also relieving because I could finally leave my hell of a job. I really stress that you should not quit your job unless you are absolutely at wits end.  You > Others, but more importantly: You not in poverty > You in your hell hole job.


That's all. **If anyone else has done this, please add on to it! What was your experience like? How did it go? What else would you tell people who are thinking of leaving without another job lined up?**",2018-11-02 18:15:50
"You're a software engineer with years of experience, but the absolute must-know thing about you is can you solve this dynamic programming puzzle in less than 30 minutes",1714,9iu0su,https://www.reddit.com/r/cscareerquestions/comments/9iu0su/youre_a_software_engineer_with_years_of/,632,1537924190.0,"Title says it all. I think I'm having a hard time coming to grips with the current very broken state of interviewing for programming jobs. It sounds like no matter what level of programmer interview, the phone screen is all about tricky algorithm (""leetcode-style"") problems. I conduct interviews on-site for candidates at my company, and we want to see if they can code, but we don't use this style of question. Frankly, as someone who is going to be working with this person, I feel the fact someone can solve a leetcode-style problem tells me almost nothing about them. I much rather want to know that they are a careful person, collaborative, can communicate about a problem clearly, solve problems together, writes understandable code more than tricky code, and writes tests for their code. I also want them to understand why it's better to get feedback on changes sooner, rather than throwing things into production. 

So why is the industry like this? It seems to me that we're creating a self-fulfilling prophecy: an industry full of programmers who know how to apply topological sort to a certain kind of problem, but cannot write robust production code for the simple use cases we actually have such as logging a user in, saving a user submission without screwing up the time zone in the timestamp, using the right character sets, etc.",2018-09-25 21:09:50
"A Tiny Guide To ""Grinding"" Leetcode Problems",1690,avf528,https://www.reddit.com/r/cscareerquestions/comments/avf528/a_tiny_guide_to_grinding_leetcode_problems/,98,1551312768.0,"Hey all,

&#x200B;

I'm still pretty young and only in my 2nd year of college so I often can't really contribute to this subreddit in terms of raw experience...but I wanted to make a post for those of you who are studying ""Leetcode"" type problems to pass interviews at Big N companies.

&#x200B;

I have done about 250 Leetcode problems in all problem categories and read the fantastic book ""Elements of Programming Interviews"" by Adnan Aziz, Tsung-Hsien Lee, and Amit Prakash about 5 times and skimmed it 3 times.

&#x200B;

Really really really recommend EPI over CTCI but that is personal preference. EPI dives very very deep into the reasoning behind how we go from brute force solutions for each problem, to the optimal solution but it is less beginner friendly since it is more intellectually rigorous. It instills an apparatus of thinking that no other resource I have found does.

&#x200B;

I want to make a small guide answering questions people often have about these problems as well as things to watch out for.

# An Exhaustive List of Topics You'll Need To Know Well

* **Fundamentals of Computers** (just a general knowing how computers store information etc.)
   * This is just a basal thing. Knowing how binary works, how memory is managed in a program (stack & heap), etc.
* **Big O Time & Space Complexity Computation**
   * Know asymptotic bounds. If you can be flexible in how you analyze a solution you come up with (lower bounding it, upper bounding, exact bounding) it can help you see whether you can do better and make an improved algorithm
* **Arrays**
   * This is pretty straightforward. Often questions that work within arrays will be solved in linear time ( O(n) ) for the most part and that linear time solution will be tricky.
* **Primitives**
   * Things like bit shifting. This is more rare and I don't think this is as important since it doesn't test real thinking abilities since it mixes with one's abilities to bit shift which is an esoteric skill.
* **Strings**
   * These are problems that often deal with strings like permutations, backtracking problems that have use take an exhaustive approach in producing decompositions of a string to search a possibility space (which is often a brute force way of solving a problem since it will be exponential in time), etc etc. String problems are often solved most optimally in O(n) time or O(s1 + s2) time (linear with respect to each string) if we are given 2 strings...whatever the problem may be.
* **Dynamic Programming**
   * One of the most difficult subjects. This is the key: subproblems. If you can identify the subproblem, you have cracked the problem. Because from there it is all about memoization to cache and leverage previous solutions.
* **Recursion / Backtracking**
   * This is a comfort thing. The more of these you do, the better you get. At some point you will naturally think of solutions in a recursive manner (if backtracking could be a possible approach used). Problems that use backtracking often say...""generate all""...""compute every""....this indicates an expression of exhaustively expressing all the possibilities of a decision space. Recursion is beautiful for this.
* **Graphs**
   * Know DFS & BFS. DFS uses a stack (either implicit with the call stack and recursion or explicit if we create our own stack) & BFS uses a queue.
* **Greedy Algorithms**
   * These are algorithms that take the locally most optimal solution to achieve a global optimal. In contrast to problems that use dynamic programming (which is characterized by caching previous subproblems to find a global optimum), greedy algorithms take locally optimal choices.
   * Not all greedy approaches one comes up with will work 100% of the time so it hinges on being able to use deductive logic to prove that a given approach will always work
* **Hashtables**
   * Very very very common in mid-level interviews. This is a must know. It is pretty simple, when our time complexity is too high, we can often reduce time and increase space by using some sort of auxiliary structure to cache work. Hashtables are often that auxiliary structure.
* **Linked Lists**
   * A tricky structure to work with. It is hard because we can't index into items. It gets easier with time but always remain tricky.
* **Sorting**
   * Know the fundamental sorting algorithms. Bubble, Insertion, Selection, Merge, Quick, Heap, ...etc
* **Searching**
   * If an array is sorted. IMMEDIATELY know that that is a strong hint that the optimal solution will use binary search and stay to the order of O(log(n))
* **Min/Max Heaps**
   * Heaps are really cool. Just know...if you see ""find the LARGEST""...or ... ""find the SMALLEST""...anything to do with size...think heap. Min or max. If we want larger items we use a min heap since we can throw away small items (to leave the large ones behind). And vice versa for when we want the smaller items
* **Stacks**
   * LIFO structures. Know how to implement a stack inside out. it is fairly easy so don't fear it. I'd suggest knowing how to implement all data structures stated here. Why not?
* **Queues**
   * FIFO structures. Used for Breadth First Search.
* **Trees, Binary Trees, & Binary Search Trees**
   * Trees are connected, acyclic, graphs. You can do DFS and BFS on them. Print all the characters in the tree in this order? Does it look like DFS? You can do that. Traverse the tree level by level? Looks like BFS. (BFS goes out level by level).
* **System and OO design Principles (sometimes)**
   * Some compaines ask Object Oriented questions. A great great resource for this is the book ""Clean Architecture"" by Robert C. Martin. I also highly recommend his book ""Clean Code"" but it won't help you for interviews (but will make you a better programmer)

# An Approach To Preparation

1. Find your weak topics. For me those were trees, backtracking, dynamic programming, and linked lists.
2. Start with easys. My first Leetcode problem was Jewels & Stones (you can search it) and it took me 30 minutes......it was just 2 for loops. Am I dumb? ... maybe ... but these problems are so far divorced from daily programming tasks that it was difficult for me.
3. Easys will be very difficult when you just start...then they will start getting...easy...hmmmm...onto the mediums.
4. Your summer internship interviews will be medium difficulty questions. Full-time roles will be upper medium questions sprinkled with a few hard questions. Stay rooted in the fundamentals above and you can survive.
5. Go onto hards if you want...but don't get lost on esoteric problems that require ""special"" tricks. This is all about getting ready to pass an interview for a job, not so much to have bragging rights.
6. Top it all off with polishing your delivery. [pramp.com](https://pramp.com) interviews helped me immensely. I did about 8 in person interviews this past season.

# F.A.Q.

**How many Leetcode until I'm ready?**

There is no finite amount. Every person comes to the table with their own weaknesses in all topics above. You will know when you are ready. You will see a problem and say...""Oh...yeah I know what principle to apply here"". The more you get that spark, the higher the chances you pass.

&#x200B;

**Should I time myself?**

Yes and no. Time is critical. Speed is critical. But timing yourself is useless if you are very uncomfortable with a specific problem class. I suggest solving many problems (peeping the solutions often is fine...just gain comfort) in your weak points. Then when you get sick of jumping to answers you will soon take the leap and just solve the problem yourself because you will become familiar with the techniques required for the approach. (this is how backtracking was for me. I went from total confusion to it becoming a default way of thinking.)

&#x200B;

**What should I focus my studying on?**

Weak points. And then popular problems. Find a list of problems the company you are interviewing at asks. No idea whether this is a myth or not (and CTCI addressed this as false...that companies repeat questions from a list) but I have friends that told me of getting exactly questions from these lists. It isn't critical but it can help.

&#x200B;

**Reading books vs. Leetcode/HackerRank?**

Books give you theory. Coding gives you the memory in your fingers and the necessary practice. Like...if I know a problem will use BFS, how fast can I put the logic in place for a basic search? If I know that a problem may use a heap...how fast can I throw up a priority queue with the right comparator (if it is a max or min heap...Java defaults to a min heap without a comparator)

&#x200B;

Hope this helps someone...or made any sense...I typed it up quickly.

&#x200B;

I'm honestly not THAT good...like problems still stump me...but I've come a long way so my experiences may help someone else.

&#x200B;

I'll make more posts if people want more small tips.

&#x200B;

**Edit:** Holy crap. That is a lot of upvotes....um....yeah. Hey.",2019-02-27 19:12:48
"If this subreddit gives you anxiety, depression, or thoughts of suicide, then it's time to take a break from r/CSCQ.",1654,78bxq9,https://www.reddit.com/r/cscareerquestions/comments/78bxq9/if_this_subreddit_gives_you_anxiety_depression_or/,269,1508831645.0,"**National Suicide Prevention Hotline:** 1-800-273-8255


I've been reading (sometimes daily) messages on the stickied discussion posts about people struggling to wake up everyday or on the verge of ending their lives because of how miserable they feel from the rejections that come with the job search.

I'm here to tell you that putting your sole identity in whether or not you have a job (especially at a Big N) is going to fail you. Every earthly thing can and will fail you. You **cannot** let this define you. There is so much more to life than the cookie-cutter shape you put yourself into when you think like that.

Getting a job at your dream place doesn't suddenly get rid of those crippling thoughts that you may have. You will continue to experience them, even if you suddenly got that six-figure job in your dream city.

Work on yourself first, then work on your career. Stay away from this subreddit for a while; it can be very toxic to your well-being, if you allow it to control you.",2017-10-24 03:54:05
"I'm 32 years old. I'm a recovering drug addict with a 3.92 GPA, 4 great internships, and have worked my ass off to be successful. If I can do it, any of you can.",1655,ccxtvc,https://www.reddit.com/r/cscareerquestions/comments/ccxtvc/im_32_years_old_im_a_recovering_drug_addict_with/,121,1563100201.0,"Hey, everyone. I just wanted to post this because based on what I see, people seem to be so hyperfocused on the small details in CS that won't actually affect them in life. I'm here to tell you that if I can do it, you can too.

I started going back to school at the age of 30. I had most of my gen eds completed from the first time I went to school. I dropped out because of a massive alcohol and cocaine addiction I developed. That continued until I was about 26. I never thought I would truly amount to anything. I met a wonderful woman who supported the shit out of me, we got married and I went back to school.

I'll be honest, school was not as easy the second time around. My short term memory is really damaged from years of drug use. But I didn't let that stop me. I knew I made those choices when I was younger, so I need to work on fixing them now. So I just worked harder. Harder than anyone I knew. And it paid off.


I had my first internship doing basic web development. I learned some things and it was alright. My second internship was at a startup doing full stack development. I learned a ton there and it was a great experience. My 3rd internship was at the US's leading national research lab, where I am currently at. Next month I will be going to a Fortune 100 company to do a Fall internship while I finish my last two classes remotely to graduate.

My message to people who were like me: we made our lives the way they were with our bad decisions. However, there is no reason that we can't fix it. Work hard. Harder than anyone you know. I busted my ass. I'm not smarter than your average CS student, but you damn well better believe I have a stronger work ethic.

I worked my ass off, and you can, too. And if you have addiction issues and want to make a better life for yourself then PLEASE PM me. I would love to talk to you and help you move forward in life.",2019-07-14 06:30:01
A list of questions I was asked at top tech companies,1619,apu3ni,https://www.reddit.com/r/cscareerquestions/comments/apu3ni/a_list_of_questions_i_was_asked_at_top_tech/,185,1550012020.0,"I interviewed onsite for ***senior software engineer*** roles at seven top tech companies like Apple and Twitter in August through November of 2018. The interviews were always at least 4 hours long. It was pretty typical to have 2 or more coding sessions, with one behavioral round sometimes, and one system design round sometimes. These are all the questions that are on leetcode, that I experienced either in the phone screen or at the onsite.

It's probably important to mention that most of the time, the actual question was just a pretext to talk about larger issues. For example, once solved and implemented on the whiteboard, the interviewer always had follow-up questions around possible alternatives, what to do if there's too much data to fit in memory, what if this or that assumption changed, etc. 

&#x200B;

**Easies**

* [First Unique Character in a String](https://leetcode.com/problems/first-unique-character-in-a-string/) (received from two different companies)
* [Closest Binary Search Tree Value](https://leetcode.com/problems/closest-binary-search-tree-value)
* [Merge Two Sorted Lists](https://leetcode.com/problems/merge-two-sorted-lists/)

**Mediums**

* [Basic Calculator II](https://leetcode.com/problems/basic-calculator-ii/)
* [Word Search](https://leetcode.com/problems/word-search/)
* [Number of Islands](https://leetcode.com/problems/number-of-islands/)
* [Unique Paths II](https://leetcode.com/problems/unique-paths-ii/)
* [Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/)
* [Add and Search Word](https://leetcode.com/problems/add-and-search-word-data-structure-design/)
* [Course Schedule II](https://leetcode.com/problems/course-schedule-ii/)
* [Palindromic Substrings](https://leetcode.com/problems/palindromic-substrings/)

**Hards**

* [Merge K Sorted Lists](https://leetcode.com/problems/merge-k-sorted-lists/) (received from two different companies)
* [LRU Cache](https://leetcode.com/problems/lru-cache/) (received from two different companies)",2019-02-12 17:53:40
You will fail.,1583,7kopjj,https://www.reddit.com/r/cscareerquestions/comments/7kopjj/you_will_fail/,172,1513664637.0,"You will mess up.

You'll do poorly on assignments and tests.

Your side projects will not work.

Your code will be sloppy and incomplete.

You will bomb job interviews.

Your PR's will be rejected.

And because you fail, you will succeed.

Don't be afraid to fail, don't let it destroy your self-confidence, don't let it define you. Instead, do everything you can to learn from that failure and take that new knowledge into the next piece of work.

Indeed, failure is the only path to success.",2017-12-19 01:23:57
Verbal Offer Rescinded due to GPA,1564,a1xqeo,https://www.reddit.com/r/cscareerquestions/comments/a1xqeo/verbal_offer_rescinded_due_to_gpa/,546,1543649693.0,"Went through the whole process with a Big N company, passed HC and matched with a team. I was extended a verbal offer before my recruiter said she was submitting my package for an official offer. 2 days after that I was asked to write a statement justifying my lower than usual gpa (2.6) and a week later i was informed that the offer committee was unable to give me an offer.

I just find it really messed up. I turned down offers after I was matched with a team. They've had my unofficial transcript since the beginning of the process and no issues were brought up until the end of the process.

I don't know why I am making this post at this point, I am just really confused and sad. Really thought it was a sure thing at the very end.

&#x200B;

Edit 1: Since a lot of you guys asked, this is an SWE internship in the summer. Which is why its a little more difficult for me to re accept my other offers as you guys know internship hiring cycle is a ticking clock, the other offers have expiration dates, and this company strung me along for 2.5 months in the prime of hiring cycle. 

I am no stranger to rejections, and I am not against private companies holding a standard for what kind of people they hire. I am just confused and depressed because they have had this information since the beginning of the hiring process, right after the code screen they have had my unofficial transcript. I think its kind of a shitty thing to do to a candidate in university, because I used a lot of the precious time I could've used to look for another job this summer. 

As of the verbal offer thing, here is what happened. My recruiter told me that I was successfully matched with a team, and the intern host is excited to bring me on. She said ""I will submit the offer right now, you should receive it within 1-2 business days. Congratulations!"". ",2018-12-01 02:34:53
"Have you ever wondered what the hiring process was 20 years ago compared to today? Probably not, but I'll tell you anyway.",1523,brjexy,https://www.reddit.com/r/cscareerquestions/comments/brjexy/have_you_ever_wondered_what_the_hiring_process/,306,1558521862.0,"I have searched tech jobs twice in my life.  Once as a new grad in 1999, and just now.  For those that are just curious, or for those that are older and am curious about the current recruitment process, let me explain what I saw.

1999:

Jobs were super easy to get.  It was a weird time when non-tech folks were in charge of tech folks.  Also, the amount of technology used wasn't as massive and varied as it is now.  No one asked for 12 years of Python Experience with Computer Vision with Jenkins within a Docker container or whatever because that shit didn't exist back then.  It was a much simpler time.  It was kind of Development of System Admin as the major pillars back then. 

This meant that often times, it was behavioral and simple questions, as many hiring managers were just general people managers and not Engineering managers.  

In terms of tech questioning, whiteboarding of useless problems was the only way to test really.  But it wasn't that complicated.  And if you were decent, and communicated well, you got the job.  I think I ended up with 10 offers out of 10 second round interviews (I got rejected by one, but another one gave me two offers).  But since I just finished undergrad, silly algo / data structure problems were all I knew, it was super easy for me.  Sure, the first time I saw vi I was scared and had to ask a colleague what this was, but I could traverse a graph on whiteboard like a motherfucker.

Recruiting was also different.  It was put your resume in a resume database and kind of wait.  job fairs were the best way to do that.  The massive recruiting teams that large employers have now were definitely not at today's scale. This meant that you got fewer requests for jobs, but you also weren't competing against 100 other people for that one position.  Essentially, if you were contacted, there was a much better chance you were getting the job due to limited HR resources.  It saved a lot of time.

Also, there were no tiered awesome companies with great pay.  It was pretty standard for a new grad.  I got $62K and a few piddly stock options at the time at the most awesome company ever, a company that would never run out of ideas and dominate the industry forever.  That company was Sun Microsystems.  So, yeah, don't count on me for any gambling advice.  Pretty much ever company was the within $10K of that, with varying degrees of stock options. 

All that being said, the fallout of the dot-com bust (one year later) was dramatic.  All those people who were hired with limited credentials and skills suddenly got canned and things got tight.  Suddenly, knowing HTML didn't make you a coder anymore.  I know a lot of people who were plain screwed.  There were no bootcamps back then, but equivalent were the people that learned to code with the ""Learn Java in 21 Days"" books were assed out at the end of the day.  A lot of them went it to Real Estate, so, yeah, you can put two and two together on what the next downturn was.


2019:

First thing first.  Holy fucking shit job searches are annoying.  You need to match all these random technologies.  Then, even if you have that, you have to memorize all those leetcode tricks (that's right, not skills, but tricks).  Sure, I know loops and trees and the like, but dang, I didn't remember the trick to get the consecutive subset of numbers to equal a passed in sum efficiently (mine was inefficient) - so yeah, even though I matched pretty darn well with the job requirements, I did not get that coding parlor trick, so I'm out.  This was for a partner engineering position BTW, which in no way shape or form would require any sort of algorithmic knowledge. 

In my undergrad days, I would say I memorized 80% of those tricks out there.  Today, I know about 40%.  So, I was immediately knocked out of like 60% of interviews.  I didn't realize that the leetcode monkey dance would be so prevalent.  Next job search, I know what to study for - this last one I was ill-prepared.  Anyway, I think most people felt the algo / data structures problems were outdated 20 years ago - but man, they are even worse now.  But knowing the trick basically got me an in as well.  So yeah, it's completely fucking random whether I impress people or not.  One company thinks I'm an idiot and nother thought I was God because of the random selection of leetcode-esqe questions.  

On the opposite end - holy fucking shit does this pay well.  MY. FUCKING. GOD.  5 years ago, those that got $300K were lucky to jump in the right company at the right time with the right options, were a super genius, someone who is some major thought leader, or some Senior Director.  Now a schmuck like me can get near $300K.  This is crazy.  I joined a company for $180K in 2017 in total. compensation, and I was ecstatic.  In 2012, I think I was rightly paid at $120K or something like that.  Now I just accepted an offer for $280K.  This is nice, but also a bit scary.  I've been through 2 different downturns.  What's going to happen if there's another downturn and these crazy salaries whither away?

Let me put it another way.  For the early to mid 2010s, my wife and I were paid the same though she's way smarter than me.  But since she does supply chain and not tech, she's gotten about a 30% increase in pay in the last 4 years (pretty good), and my pay has roughly doubled. 

I'm also amazed that some companies out there think that it is still 2015 and offer those salaries.  Most non-tech companies are completely flabbergasted in terms of my desired salary.  Many of them came back later with a substantial increase because they couldn't find anyone qualified, but I still had to say it wasn't enough.  

Recruiting is also way different.  LinkedIn is awesome, because I know how Yakov Smirnoff feels when he talks about Soviet Russia.  On LinkedIn...Jobs come to you!  Of course, since it is LinkedIn, you got to wade through all these useless intros.  It's a full time job.  I think the first week I said I was actively looking, I got 30 pings.  Everyone wanted a half hour conversation.  Many of them didn't bother reading my requirements.  No, I am not a front-end engineer and no I don't want to move to Seattle - why do you want to talk?  Many just plain ghosted me after I replied with something like, ""I am interested and I would like to know more.""  Like, what did you want, me to show a picture of myself jerking off to Tim Cook or something or in order to get a reply back from you?

Most recruiters who do talk to you basically tell you are God's gift to employers, then either say something like, you were not a match to the job I said you were a match to, or send me to another person who grills me.  It's a huge bi-polar emotional rollercoaster of validation and rejection.  I was mentally drained from all this.  Like my ex-girlfriend is God of job applications or something.

Also, the pillars are way different.  You don't have simple pillars like Development or System Admin, it gets way more fragmented.  You have DevOps/SRE, you got Web Development, ML/AI/Data Science, and way more high level pillars.  This is cool in that you can be more sure of what you want, but not cool in that once you are in one, it takes some effort to get out. 

In terms of those pillars - DevOps/SRE is the hottest thing out there right now. I actually just got a Masters in CS with a specialization in ML and some minor ML experience.  No one gives a flying fuck. But because I can spell Kubernetes, I got DevOps / SRE requests left and right (this is the job I essentially took BTW)

Anyway, 2019 is similar and different in many ways.  But damn, I do not want to go through this job search again.  FUCK. THAT.

...............

Anyway, for us old farts who walked uphill both ways in the snow, I wanted to share a few tricks along the way and would totally do my job search differently.  Here's what I l learned. 

1) Leetcode algo / data structure memorization is key.  Sure, they don't know if you are older, but it's the easiest way to have age discrimination.  Very few 41 year olds are going to remember what they did in college at age 20 - the perfect way to filter out the gray hairs and those with a family.

2) I always ask for salary.  Weed out those that say, ""it depends.""  Depends on what?  My experience?  The exact same experience that you can see on LinkedIn as we are talking right now?

3) Ask a question that only a hiring manager can answer.  If the recruiter can't do that, the recruiter is just gathering resumes and has no idea if you ""perfect for the job"" as he or she states.  Time is limited with the relentless amount of pings you'll get - this is a great way to make sure that they are serious about you being a candidate.

4) Ensure that you are the only person interviewing for that position if possible.  I got a semi-offer from a company because they loved me, and wanted me to wait for another rec to open, but they hired someone with Azure experience and explicitly saying Azure experience is not a requirement.  I wasn't going to wait and it was a complete waste of my time.  I found that there are companies that have like 5 people interview for one position, and those that interview one at a time and will fill it if you are good.  The latter is the key because you are the only variable.  Ask for flexibility in terms of interviewing.  If they are interviewing a whole bunch of candidates, they want you in a 3 day window.  If they are just checking you out exclusively, they'll be really flexible.

...............

Anyway, enough my pointless rant.  Now you little fucking whippersnappers can get off my lawn!",2019-05-22 06:44:22
"Overworked Chinese developers gather on Github to protest ""996"" work schedule",1519,b8t8cc,https://www.reddit.com/r/cscareerquestions/comments/b8t8cc/overworked_chinese_developers_gather_on_github_to/,257,1554292668.0,"[The repo,](https://github.com/996icu/996.ICU) now with 150K+ stars, is the fastest growing repo in the Github history. Big names like Huawei, Alibaba, and Ant Financial are all on the blacklist. It just really saddens me that such toxic work hours is the norm in my homeland and I'm worried that if this continues to blow up the gov will eventually ban Github in China. Maybe I'm being overly dramatic but some major Chinese browsers are starting to blocking the repo page.",2019-04-03 07:57:48
"A hiring manager actually went through my github projects, complimented them and logged into them..",1521,bne0q3,https://www.reddit.com/r/cscareerquestions/comments/bne0q3/a_hiring_manager_actually_went_through_my_github/,115,1557621366.0,"Title. I’m a self taught person, aside from a few college classes I took, but it feels good that a company (I know most don’t have time) went through my resume and GitHub and didn’t just toss my resume out for not having a CS degree.

I don’t think I’ll get that job, but that was the best interview I ever had. I was using google analytics and they were looking through my portfolio multiple times.

Also, when I didn’t know something, they didn’t just move on, they  explained the concepts to me. I have never had an interview where someone (hiring manager) actually looked through my projects (only had 5-7 interviews out of maybe 100 applications), most of them ended up showing me the door and saying “thank you”. I’m probably ‘very junior’ in some aspects, but man, I wish all companies would provide that type of mentorship, even if it’s just in the interview.",2019-05-11 20:36:06
Anyone else really sick of the triplebyte ads?,1509,d2u3wf,https://www.reddit.com/r/cscareerquestions/comments/d2u3wf/anyone_else_really_sick_of_the_triplebyte_ads/,196,1568253172.0,"i see these things close to 30 times a day. some of them are very cringey. 

> irritating triplebyte_guy explains to you...

please stop

edit: my first gold, relief at last! thanks!",2019-09-11 21:52:52
Why I stopped giving companies my references,1501,cjzbfv,https://www.reddit.com/r/cscareerquestions/comments/cjzbfv/why_i_stopped_giving_companies_my_references/,213,1564554965.0,"While I was job hunting a few months ago, I stumbled across a job opening on LinkedIn posted by ""Robert Half"". After applying, I was invited to interview with Robert Half's VP of Software & Applications. But before my interview, He requested 2 of my professional references which I happily gave him. After that, the Skype interview went great.

The next day, my reference called me telling me he spoke to Robert Half & that he said he talked me up good & that he thinks I'll get the job.

I never even heard back from Robert Half. However, my reference did. They called him 3 more times for reasons unrelated to my job search! For the past few months, he received calls from Robert Half in which they were trying to get their software developers to work on his company.

I find it very unprofessional that they used my references for their own gains without even having the decency to write me an email telling me that I didn't get the job. Unbelievable.

Edit: Thanks for all of the up-votes everyone. This was actually my first ever Reddit post.  
I made a youtube video about the situation: [https://www.youtube.com/watch?v=MOlbqn5saww](https://www.youtube.com/watch?v=MOlbqn5saww)",2019-07-31 02:36:05
How I went from 2.4 GPA and unemployed to my dream job.,1478,6ndohd,https://www.reddit.com/r/cscareerquestions/comments/6ndohd/how_i_went_from_24_gpa_and_unemployed_to_my_dream/,120,1500116246.0,"Long-post inc.

First of all, I would like to tell you guys that I was unemployed for 8 months after I finished college. I interviewed everywhere, from Amazon to dinky and sketchy startups. I've taken advice and encouragements from this reddit as I pushed forward. On the other hand, I've been discouraged by this reddit when the ""annual salary"" or ""what internship did everyone get"" threads started popping up. I looked at people on this reddit and thought that someone like me with barely any projects, zero (real) internships, and a whopping 2.4 GPA would never land a good job.

I kept pushing. I used to not get even an email back from companies. Then I slowly got phone interviews.. in which I failed. I guess it's time to go back to reading reddit, time to start working on leetcode and oh, I guess I'll get that Cracking the Coding Interview book. Phone interview started to lead to on-site. Let me tell you, I was not ready for those long 4-5 hour onsite grinds.

Eventually, my hard work paid off.

And here's the thing. I thought the company I accepted the offer from was going to suck. It's not the Big 4, no one has heard of it. It's just a medium sized tech company that gave me a job as a ""junior devops."" I hesitated because I didn't work hard just to be a devops, I wanted to be a dev. I wanted an above average salary, not just ""junior rates."" Nonetheless, I accepted quickly because a job's a job. (I didn't even negotiate.)

A year down the line, I love this job. I love it so much that I wouldn't leave it for any of the big 4. (except maybe Google). I make average salary in my city but I didn't expect work life balance to be this great.

Here are some of the cool things I appreciate from working at a “random” company : 30-40 hour work week, free food/beer, go to work 11am-5pm, unlimited paid sick days, amazing manager who really pushes me to climb up the ladder (our first one on one, he wanted me to eventually take his job.) and of course, being a devops. I learned more in this past year than I could have ever imagined. I learned big data(hadoop, mesosphere)  ,CD/CI (ansible/docker) , AWS (lambda, ec2, cloudformation, batch, elasticsearch, cloudwatch) and became an SME (subject matter expert) at centralized logging (ELK, nagios, splunk). I also learned like 5% of bash, which basically made me four times as fast when writing scripts compared to school-taught languages like java and c++. I wear many different hats even though the company is about a couple thousand people. I’ve been a product owner, release engineer, and am currently in multiple different teams (multiple scrums a day).

**In the end, all these cool things that are associated with my job did not come from a Big 4. It didn’t even come from a well-known tech company (you probably haven’t heard of it). It was given to me even though I have a crappy GPA. How I got a job was just based on tenacity and persistence, how I kept the job was because I took initiative and actually wanted to “at least learn devops so I know both path)”. You guys can do it, no matter how depressing being unemployed can be. No matter how bad the job looks compared to /r/cscareerquestions kiddos’ job. This industry is amazing and I wouldn’t give up computer science for any other subject in the world. Thanks /r/cscareerquestions!**",2017-07-15 06:57:26
Would you be interested in videos where I teach how to solve a whiteboard problem in a real interview setting?,1474,7109k5,https://www.reddit.com/r/cscareerquestions/comments/7109k5/would_you_be_interested_in_videos_where_i_teach/,176,1505819902.0,"I organize programming meetups in SF and in one of the recent meetups, I held a working session for folks to solve problems on the whiteboard. And I was surprised how difficult it was for most of them.

In feedback, I got a lot of requests to show them how to approach a real interview scenario with whiteboard problems.

I really wish I could hold more of such workshops, but I'm limited on time.

So I'm thinking of making whiteboard videos where I solve problems on the whiteboard in a real interview setting. My wife is also a software engineer, so she play as the interviewer. 

We can do it such that I would be seeing the problem for the first time, so it'll be very much like a real interview.

If I make sure the videos are high quality and full of value, with some interview analysis at the end...

... would any of you be interested in such videos?


**Edit**:
Thanks for the responses, I wasn't expecting it to be this many! I'd hate to keep you all waiting, so I'll release the **first video tomorrow (Wednesday)**! Please look out for it, would love to get your feedback.

---------------------------------------------------------------

**UPDATE**: 
I was overwhelmed with the number of responses, and couldn't make you wait any longer!

So without further ado - Introducing **Whiteboard Wednesday**
https://www.youtube.com/watch?v=P_YMAJWEK3Q&list=PLs2vRLhtciEt46Fg-uz1LQxb4xSW-KMGa

**Whiteboard Wednesday** will be a weekly series where I solve an interview problem on a whiteboard. 

The first video is fairly easy because I want you to focus on the process rather than the problem itself. 

There are so many learnings I could break down in this video alone, but I limit it to just 3 due to limited time. I'll cover more in the next videos. 

I'm very glad that this will be of value to you. I plan to go into more data structures and algorithms in the next videos, but I also want your feedback. 
So please comment on the video about:
- What you liked about the video
- What you learned or found interesting
- What other problems you'd like to see

Also feel free to criticize, that's how we learn :)

I have put in a good amount of effort to make it high quality. So I would love to see it benefit a lot more people. So **here is my request to you:**
Please share this video right now with at least one person that you think would benefit. It'll really make my day.

Thanks, and I look forward to the feedback!

",2017-09-19 07:18:22
For the love of god please stop Peeing in the talent pool!,1441,4xfkc7,https://www.reddit.com/r/cscareerquestions/comments/4xfkc7/for_the_love_of_god_please_stop_peeing_in_the/,514,1471061400.0,"Listen, these code tests are getting ridiculous, I've now had in one week my second ""Opportunity"" where they wanted about 8 hours worth of work to see how well I code.  The only reason companies dare to pull shit like this is because you guys are willing to complete these tests.  I dare you to call 5 plumbers up, tell them they each need to spend a full day completing some sort of complex plumbing task and whoever does it the best gets to install a toilet.  I know ""Developer"" and ""Assertive"" are two things that generally don't go hand in hand, but dear god as a community I implore you to please stop agreeing to this ridiculous stuff.  Furthermore I find the code tests will resolve around some barely used shit, like .net full stack developer, and then the code test revolves around knockout js or some other stupid buzzword framework.  There are so many jobs out there for us, don't be afraid to tell them to take a flying leap through a flaming hoop.  

tl;dr
Please stop agreeing to 8 hour code tests, it's ruining the job market.  Code tests are a great way to cause devs to develop a sunk cost fallacy and accept jobs for less pay than they should (because they don't want to go through the process again).  Code tests are collectively bad for the profession and you need to stop agreeing to ridiculous ones.  It's ruining it for all of us.
/rant

Edit:  Downvotes Galore from Recruiters and Hiring mangers.  Yay!",2016-08-13 00:10:00
"I created a mind map of nearly all the concepts to study for the tech interview, which helped me land my dream job",1410,6tc4uw,https://www.reddit.com/r/cscareerquestions/comments/6tc4uw/i_created_a_mind_map_of_nearly_all_the_concepts/,169,1502613948.0,"A little background:

I've always dreamed of working in Silicon Valley, so last year I decided to quit my software engineer job and move to the Bay Area. For 6 months, I spent 8-10 hours almost everyday studying or interviewing for my next job. I applied at over ~120 mid-sized/large tech companies, (phone/onsite) interviewed with ~70 of them, and was rejected by or failed almost every single one. Needless to say, I was terribly bad at interviewing...

Eventually, after hundreds of hours spent studying/practicing interview problems, and a lot of failed interviews (and learning from every one), I was able to land my dream job at a top tech/big N-type company!

I've lurked /r/cscareerquestions for years, and it's been both helpful and inspirational in my goal to work in Silicon Valley. 

I created this comprehensive mind map of data structures, algorithms, and system design concepts to help me study for the interviews. As a thank you to this subreddit, I hope that this can help you in your studying and interviewing as well!

Image of the mind map: http://i.imgur.com/JbVwvxo.jpg

Mind map Link: https://www.mindmeister.com/936304672/algorithms-data-structures-computer-science-math

",2017-08-13 04:45:48
"A quote from a popular CS professor at Illinois: ""If your computer science major isn’t difficult, or it doesn’t have a high workload, ask for your money back. You are being scammed.""",1400,8lz489,https://www.reddit.com/r/cscareerquestions/comments/8lz489/a_quote_from_a_popular_cs_professor_at_illinois/,390,1527252253.0,"I read this on Quora today and it made me think of all the people who said they never had an internship or were struggled to find a job out of college despite sending hundreds of applications, and even those who said their college removed Discrete Math from their CS curriculum. As someone who has been in a top CS program and a shitty one, I can say that the gap is fucking huge. 

Edit: some of you might be interested in this. His website, http://algorithms.wtf, has some really good notes on algorithm concepts. I really liked the DP and graph one. Check it out. 

Edit 2: I'm not Jeff himself, but I don't think his intention was to tell everyone to go to top schools. I think it's mostly that there are a number of crappy ones out there. Those are two different things. So look out for yourself. Also, he did not say anything about being hardworking or anything, so please keep that in mind. 

Edit 3: so Jeff has entered the battle. He is u/jeffgerickson, and he seems to be answering/clarifying stuff. Sorry if this has brought you some unwanted attention, and thank you for caring about us, and help making CS@Illinois great! ",2018-05-25 08:44:13
an opinion: this sub is slowly turning to a StackOverflow jerk circle.,1374,a1i10u,https://www.reddit.com/r/cscareerquestions/comments/a1i10u/an_opinion_this_sub_is_slowly_turning_to_a/,279,1543532316.0,"I have noticed in the last few months that there is an increase in the passive aggressive *vibe* and the unnecessary sarcastic comments either for people asking such *dumb* questions or beginners just asking newbees questions.

Which is sad because this sub use to be such a helpful positive community to get advice and help, and actual **answers** for questions instead of sarcastic answers for people fishing for likes.

I am comparing it to StackOverflow because that's one place where everyone is an a-hole with a chip on their shoulder.",2018-11-29 17:58:36
I fucking love our field.,1344,coac0f,https://www.reddit.com/r/cscareerquestions/comments/coac0f/i_fucking_love_our_field/,337,1565422255.0,"Just sitting here stoned after a nice hard week at work, appreciating how great our field is. Don't get me wrong, there are occasional times where I want to rip my hair out, but most of the time it feel so fucking enjoyable solving problems all day. I love how we're all making pretty good money too! It's times like this that I can say there's simply no better field than this, and that for all our bitching about the day-to-days of work, our field is actually pretty damn great.",2019-08-10 03:30:55
Don't trust the extremes.,1344,6tista,https://www.reddit.com/r/cscareerquestions/comments/6tista/dont_trust_the_extremes/,134,1502697869.0,"This subreddit has a whole bunch of extremes. If you see folks posting about being rejected 70 times or what not, it's best to ignore it. Be happy with a person's eventual success and use their tools and paths they've laid out for you, but realize that it's not you.

The vast majority of folks (even the ones at a Big N company) don't post on this sub. They don't post because they don't have any particular story or feat they've accomplished. They haven't studied for 18 hours a day for 80 days in the desert with no food or drink while being hunted by assassins.

Most people just apply and get a job. Some people do some stuff on the side. Many people do a bit of studying before they go into an interview. But pretty much everybody ends up with a job. 

Seriously, chill out folks. The people that you're reading about aren't the norm because the norm doesn't post.

Edit: But like really, most people don't even realize this subreddit exists. ",2017-08-14 04:04:29
"Is anyone else just tired of the ""Silicon Valley Experience""?",1338,9rf4sn,https://www.reddit.com/r/cscareerquestions/comments/9rf4sn/is_anyone_else_just_tired_of_the_silicon_valley/,441,1540536159.0,"I'm about to graduate from a top 5 CS school with a degree in CS in May 2019. I'm on track to get a solid six figure salary with good stock options and bonus as a 22 year old. All my friends will be living in the same area as me after graduation and we'll probably live together. In the grand scheme of things, there is nothing wrong with my life and it's a position that a lot of the younger people on this thread really are shooting for. I'm not happy though. I feel like Silicon Valley is so cold and unfeeling. Everyone here is looking at the bottom line for themselves. There is no real community outreach or integration into the area people live. There's widespread entitlement and a tendency to throw money at problems until they disappear. There's liberalism in name only here but very few people are willing to put their money where their mouth is. There's obvious classism and racism out here. I'm fairly progressive when it comes to politics but I find the people out here tiresome when it comes to disagreements especially since the extent that they engage in controversial topics is just lip service. I used to talk about how LA is superficial and cold but I don't think The Bay is that different from that anymore. It's all about where you work, who you know, and how much you make. Not that there's anything bad about that, but it really just feels like a bunch of people living in an ivory tower surrounded by a large, well protected gate while there are starving masses outside that are really just trying to survive. 

&#x200B;

I grew up upper middle class but was best friends with a lot of people who were just above the poverty line (east coast). Most my friends were latino or black growing up (I'm Indian-American) and it really bothers me that such a large portion of this Asian/Indian/White dominated area looks at those demographics so poorly. There are so many social issues here that we, as members of the tech community, are contributing to but refuse to acknowledge past the point of talk. I'm sick and tired of it. Everyone is out here asking questions like ""how do I get past interviews at companies like FAANG?"" and ""how much is the starting salary for someone with {my skillset}?"" But in the end aren't most of these people just looking for run of the mill backend or frontend jobs? Won't we all just be building CRUD applications for the Ubers, Lyfts, Googles, and Amazons of the world while enjoying the toys that we're given with these nice compensation packages but in the grand scheme of things, we're really not doing anything fulfilling with our lives? We're all just in the pursuit of more money. Idk, maybe I'm just ranting right now (I absolutely am). I'm just becoming more and more disenchanted from this life as I get closer and closer to graduation. I'm not super keen on the idea of watching the world burn while we build cool (and often useful things) that will stay confined to the wealthy for most of the foreseeable future and cost of living for all of us shoots up dramatically. 

&#x200B;

Thoughts? ",2018-10-26 02:42:39
I made a post a year ago about applying to 500 places with no response and wanted to let you know what happened.,1334,b23axy,https://www.reddit.com/r/cscareerquestions/comments/b23axy/i_made_a_post_a_year_ago_about_applying_to_500/,165,1552841807.0,"I made a post a long time ago on this subreddit about being homeless after the house I lived in was condemned and sleeping in my car and having no where to go and no where to turn to. Shortly after that post things went from bad to worse as I feel into a deep deep depression and I decided to end it all and tried to kill myself by jumping off a bridge, I chickened out and left my car and and all of my possessions in the car and just ran away from everything.

I basically was an actual hobo for about 5 months and made my way to Chicago with what little money I had left and just sat around there begging for change, eating out of the trash, wishing i could die. Eventually one thing led to another and I called and talked to my family for the first time in what seems like forever over the phone and they drove out and picked me up and drove me home. I stayed with them for a few months until I was moderately better, one of my old friends messaged me that he started a painting business and he wanted me to work for him so I went and I am currently working for. I make $19/hr and I live in a studio apartment now. I realize I only ever did CompSci as a major because I wanted a high paying job and was never passionate or good at it and coasted off the work of others through college. I'm probably never going to have a CompSci job, but I'm okay with that. For now I'm just happy to have a good paying job and have heat, shelter, food, and internet. My insomnia is getting better with medication and my depression occasionally flares up, but I'm doing a lot better

https://www.reddit.com/r/cscareerquestions/comments/73nyjr/ive_applied_to_over_500_jobs_and_not_a_single/",2019-03-17 12:56:47
New law bans California employers from asking applicants their prior salary,1298,76da73,https://www.reddit.com/r/cscareerquestions/comments/76da73/new_law_bans_california_employers_from_asking/,181,1508029087.0,"http://www.sfgate.com/business/networth/article/New-law-bans-California-employers-from-asking-12274431.php

IMO, this is a game changing new law that just got passed.  All engineers in California should be aware of it.

Thoughts?",2017-10-14 20:58:07
Beware of Coinbase,1291,7nszwq,https://www.reddit.com/r/cscareerquestions/comments/7nszwq/beware_of_coinbase/,300,1514991624.0,"I just want to share my experience with Coinbase. I recently applied for a job there and here is how the recruitment process went:

1. standard application + mandatory cover letter
2. 90 minute hackerrank
3. a 6 hour take home assignment

I was going to quit when I was sent the take home assignment because I've never been asked to do such a long task, but they said they would compensate me. So I did it and submitted it. Keep in mind that at this point, I invested a total of almost 10 hours into this company. After a while, I get the generic rejection. However, it's been almost a month since I submitted the take home assignment and I still have not been paid, even after multiple emails.

TLDR: beware of Coinbase because they are unable/unwilling to pay ",2018-01-03 10:00:24
I raised the response rate to my applications from 14% to 50% just by sending follow-up emails,1275,bmzz8t,https://www.reddit.com/r/cscareerquestions/comments/bmzz8t/i_raised_the_response_rate_to_my_applications/,130,1557532458.0,"A few weeks ago on this sub someone suggested that they've had much better luck with getting responses from their applications when they found someone's email address in the company's recruiting or HR departments and sent them a quick blurb about their application. I rolled my eyes at it at first, but gave it a shot. And in the end, I hate that he was right lol. But the numbers speak for themselves.

&#x200B;

I keep a detailed spreadsheet of all jobs I've applied to, so I started tracking my response rate as well as the conversion of responses -> phone screenings, phone screenings -> 2nd round (tech) screenings, 2nd round -> onsite, and onsite -> offer. For the purposes of this, I consider a ""response"" to be an initial phone screening with a recruiter (1st or 3rd party). For what it's worth, I'm a front end dev with slightly less than 2 years of experience. Here's what it came up with:

&#x200B;

||Total applied|Total responses|Response Rate|
|:-|:-|:-|:-|
|WITHOUT sending follow-up email|65|9|13.85%|
|WITH sending follow-up email|12|6|50%|

&#x200B;

Not only did the response rate go up, but the responses were quicker (usually 1 or 2 day turnaround time), and they had higher conversion rates amongst all steps in the interview process. I won't provide my conversion stats since they're skewed because I accepted an offer, so I stopped some interview processes midway through. The offer, by the way, was from one of the companies I sent a follow-up email to ;)

&#x200B;

The strategy is to find a recruiter or HR person on LinkedIn. A lot of recruiters I found will list their work emails directly in their bio. Otherwise, I would usually just guess that their email was [`firstname.lastname@company.com`](mailto:firstname.lastname@company.com) which was the case 9 times out of 10. My emails consisted of just a couple sentences:

&#x200B;

>My name is <name>. I submitted an application for the <position> just now, and I wanted to follow up with someone on the recruiting team, and I found your email on LinkedIn. I think you will find my experience as a <current position> at <current employer> to be a good fit for the role, and I'm excited to hear more about the team!  
>  
>I've attached my resume here, and my portfolio and my LinkedIn profile are below. Please don't hesitate to reach out to me at <phone> at any time.

&#x200B;

BTW, \[here's a link to my job application spreadsheet\]([https://docs.google.com/spreadsheets/d/1hIidVSwJ214ikHE\_xefMfhbKFSoFkVlUWXntKmeGUJs/edit?usp=sharing](https://docs.google.com/spreadsheets/d/1hIidVSwJ214ikHE_xefMfhbKFSoFkVlUWXntKmeGUJs/edit?usp=sharing)) that includes the response and conversion rate formulas. Hopefully someone will find it useful.",2019-05-10 19:54:18
"I was recently hired by Zytech, a consulting company that creates fake portfolios for their employees. They instructed me to lie in order to get senior-level jobs that I’m not qualified for.",1274,axqkcq,https://www.reddit.com/r/cscareerquestions/comments/axqkcq/i_was_recently_hired_by_zytech_a_consulting/,278,1551850580.0,"Having recently completed Udacity’s Android Developer Nanodegree, I felt like I was finally ready to start applying for junior level Android developer jobs. I applied for over fifty jobs in one week, scoring a few interviews, and receiving a job offer from one of them: [Zytech](https://www.zytech.io). After speaking with Zytech's CEO over the phone, I was informed that they are a company that takes developers who are just starting out, trains them to get them job-ready, and then assigns them to one of their existing clients. The only catch is that I’d have to be willing to relocate anywhere in the US based on the client's location. They offered $30 an hour plus benefits, which seemed amazing to me (the most I’ve ever made is $11/hr). I was ecstatic, and accepted the offer instantly. As soon as I was assigned to a client, I’d be making more money than I ever had, with guaranteed semiannual raises. Sounds great, right?

&#x200B;

Zytech is based in Atlanta, and I live in Phoenix, so all communication was done via email or phone. Before I could speak to clients, I was first asked to review three apps that their former consultants had worked on, to make sure that I knew my stuff. I reviewed and recreated an Activity from each of them, trying to improve them as much as possible to show off my skills. I was extremely excited and ready to get in touch with clients. Below you can see videos of my apps running alongside the actual apps (mine are on the right).

&#x200B;

[Fly Delta](https://youtu.be/dBvL5MJszPg) | [CVS Pharmacy](https://youtu.be/AHXtOGEteaQ) | [Prime Video](https://youtu.be/6femiDgWfB0)

&#x200B;

Once I had completed all of the app reviews, I was nervous as I didn’t know what to expect. I actually never ended up receiving any feedback whatsoever on my code (that I had spent hours of time and energy on), but, I was told that I could start talking to clients. As it turns out, they didn’t have me work on the apps to show them that I could code, rather, they wanted me to work on them so that I could lie and say that I had actually worked on the published apps. When I say lie, I’m not exaggerating: they fabricated an entire [portfolio and resume](https://i.imgur.com/gtpeCO5.png) in my name that says that I had worked at these companies for \*years\*. Remember – the only experience I have comes from personal projects. I was told that since I was employed by Zytech, I was allowed to ""borrow"" their other employee's experience.

&#x200B;

Friday was the first (and last) day that I spoke to any clients. I was told to follow the resume that I was given when speaking to clients, which included lying about jobs that I’ve never had and saying that I have experience doing things I’ve never done. And the sad thing is, it actually worked. In one day, I had spoken to a dozen clients, completed a video interview, and set up several interviews for the next week. I didn’t feel happy or excited though, I felt terrible. I was lying to everyone I spoke to. One of the clients I spoke to was really impressed with my (fake) resume, which just bummed me out even more. I discussed my disdain with two of Zytech’s staff, the president and performance manager, who both told me that while it is technically lying, since I can do or learn most of the stuff anyway, it doesn’t matter. They also told me that this was a necessary process as I don’t have any real-world experience, and that this is just the way that it is.

&#x200B;

I stopped all contact with Zytech that day. There is no doubt in my mind that this would have worked, but I am not going to lie to someone to get my dream job. It’s just not worth it. If I don’t know how to do something, I can learn it, but I’m not going to sit there and lie to recruiters and interviewers to get something I don't deserve. Unfortunately, though, other people will. I wish this story had a happy ending, but here I am back on the job hunt, with a company out there stealing a large share of the job market by way of absolute fraud. I tried my best to research the company beforehand to make sure that they were legitimate, but there is little to no trace of them on Google (several similar-named companies come up when searching for Zytech), so I hope this can at least be a warning to recruiters and prospective junior developers. I just wasted the past two weeks of my life for this company, so I'm hoping I can at least save someone else's time.",2019-03-06 00:36:20
[Shitpost] Name And Shame: The North Pole,1276,a95j3l,https://www.reddit.com/r/cscareerquestions/comments/a95j3l/shitpost_name_and_shame_the_north_pole/,66,1545691625.0,"**Pay:** The pay is abysmal. Since we are the only company on the continent, they can afford to go cheap on labor since everybody is applying here. 

&#x200B;

**Work-life balance:** It is almost non-existent. Our product is used by billions of people, and we work the whole year leading up to a single day for release. We have daily sprints they call 'Quotas' that MUST be completed before we go home. 18 hour days are common. Speaking of home...

&#x200B;

**Living Conditions:** The company decided to build their office as far away from civilization as possible, and they own much of the land there, so building our own homes closer is out of the question. So, they provide us with corporate housing, and I think it's safe to say  the reindeer have a better living space than we do. Meanwhile, CEO is living in a nice cabin with his wife getting stuffed on food we could only dream of tasting.

&#x200B;

**CEO:** He's non-existent in the office. Rumors say he's mythical, but at this point I don't even care. He used to work a lot in delivering our product, but now he outsources his own work to a company in the U.S.

&#x200B;

Guys, don't work here. Company is as cold as the weather. 

&#x200B;

Also, Merry Christmas you filthy animals!",2018-12-24 17:47:05
Got fired from Internship for not wanting to sign on full-time,1262,bsbc6m,https://www.reddit.com/r/cscareerquestions/comments/bsbc6m/got_fired_from_internship_for_not_wanting_to_sign/,266,1558692454.0,"I have been working as a developer intern at SAP in Montreal for the past 5 months.  
A couple of weeks ago, my manager asked our team of 10 people which of the two interns on the team they should hire for a full-time position starting in July.  Up to this point, I had been doing great work and getting great feedback from my team members, and the team chooses me. He specifically asked a member of the team who they would throw off a boat if they had to choose between the other intern and me. Despite this, we have managed to all stay friends and laugh at our manager's actions. My manager speaks to me and tells me they are interested in hiring me full time and asks me if I would be interested in staying.  I ask my manager some questions and tell him what I'm thinking and that I possibly would like to continue my studies and pursue a masters degree, finally, I politely asked my manager what the salary would be in order to help my decision and he gets mad that I asked him telling me how disappointed he is that I would ask him such a question. Despite this, I tell him I would be interested in staying full time and that I have been enjoying my internship thus far.  
The next day, another one of the devs on our team gives his 2 weeks notice as he has found a better job. A few weeks prior, our main DevOps guy found another job within SAP and told our boss that he would be leaving at the end of the month. Our manager threatened the DevOps guy telling him that they will ""have problems"" if he decides to stay on the team and not leave, all the while withholding him from starting his new job with the other team for 2 months, including his salary increase. Now with 2 talented team members leaving, our manager panics and attends our team's scrum meeting (a rare occurrence) and tells the team that he has good and bad news. The bad news is that the other team member is leaving, but the good news is that I have signed on to be a full-time employee. All this without my knowledge and before I even see an offer and what the salary and package would be.  
A couple of days later I receive an offer, however, it is really not that interesting and far lower than the market for software developers in the area and what other interns transitioning to full time have received at the very same company on other teams. I try to negotiate with HR, but they tell me that my manager has told them that the offer is non-negotiable and final. I decide to tell HR that I am not interested in the offer and would like to kindly reject it and continue with my internship. My goal at the moment is just to go back to school and do a Masters. At the end of the workday yesterday, HR sends an email to my boss to tell him that I have rejected the offer.  
I come into work this morning and begin to work as usual. I'm in the middle of helping another intern, and my boss takes me aside and tells me that my last day of work is going to be the end of the week since I am not a team player and I rejected the offer after he told the whole team that I am staying full-time. I am shocked question if he means this Friday is my last day, and remain silent.  I go back to my desk and continue my work while discussing other matters with my coworkers. My boss again takes me aside and tells me that I can actually leave today if I wanted to. I asked him if he could give me 5 minutes to process all the information and decide. During this time I call HR to see if I can do anything about this and to understand my rights, but they tell me that since I am an intern, my boss can terminate me at his discretion.  I take my 5 minutes and come back to see him and tell him I would like to stay till the end of the day to do my knowledge transfer to the other teammates and to not completely screw over the team and finish up my tasks and finish documenting my work. My boss tells me that when I was taking my time to think he was taking his time and wants me out immediately. He follows me to my desk and watches me pack my stuff. I try to say goodbye to my teammates who are all shocked and sad, but before I can even finish my goodbyes, he comes and forcibly removes me, walks me out the door and closes the door behind me. The DevOps guy also gets told that today will be his last day and not to bother staying until the end of the month.  
My team comes to see me outside the office and tell me how disappointed they are at what happened. The other intern decides to quit on the spot after the whole ordeal and not finish his internship in which he had a few weeks left. The team that was at 10 is now down to 6 with only 1 dev left, which is a shame as I really enjoyed working with the team and they all said how much they enjoyed it as well. The day prior we had a meeting with our big bosses from Germany where I did a demo on what I had been working on, and they were all super pleased with our work as a team and told us that we are the best team that they have in our division, and we are leading the charge in cloud development at SAP. A couple of my coworkers under the same manager have already told me that they are fed up and are already looking for other jobs, and this had crossed the line for them.  
Is there anything I can do about this in Canada? Do I have any rights in Quebec or Canada concerning termination of an internship without any prior notice?  My university is in another city, and now I am stuck in Montreal, not knowing what to do. Has anyone experienced anything similar?",2019-05-24 06:07:34
I have finally done it,1240,9sdzc1,https://www.reddit.com/r/cscareerquestions/comments/9sdzc1/i_have_finally_done_it/,187,1540855058.0,"Hello all, I just wanted to say thanks. I've been following this sub for a while, about 2 years now.

I've always wanted to be a swe, and after dropping out of community college, attending a boot camp, and networking, I'm at my dream job.

I'm at a fintech startup making 80k in Philly, where I have a lax WFH policy and ample opportunity to learn. I love my job! I went from 35k warehouse worker to 80k full stack developer in less than a single year! 

Keep working hard, believe in yourself, and network! 

Edit: this has been getting much more attention than I had thought so I'll answer some questions here.

I went to Launch Academy. I was a graduate of the Philadelphia location, but it has been shut down to focus on their HQ in Boston. Your success relies on your commitment to the end goal. I was a student for 6 months, with the last 12 being on site. I would study, read docs, watch YouTube talks, for about 4 hours a day until our on-site education began. From there, I did nothing but code, study, eat, and sleep. The support I received during my job search was good, but it relies completely on you. They lay down the foundation proven to land you a job, and it's up to you to follow through and apply yourself. Don't get me wrong, it's very scary to put so much faith in this. In fact, I had consulted with the leadership team about my ineptitude, and they cheered me on, reassuring me things will work out, and to keep giving it my all. They're very supportive, and am happy to have met everybody there. Our common interest was a hunger for success, but not in a dog-eat-dog world kind of way. Of our class of 18, I want to say 14 graduated, and of those 14 grads, 9 or so of us found jobs within 90 days. Like I said, it's totally up to you to bring your all, because if 9 of us were able find jobs, then all of us could have (given flexibility to the employer ofcourse). The company I was hired at has had great success with a bootcamp grad from a previous cohort, which had them come back for more. 

My interview was for a pure JavaScript shop. I was asked to create a fizzbuzz type of function, the difference between function expression v declaration, hoisting, closure, how object pointers work, write a SQL inner join statement, and 3 hours worth of personality interviews.

Initially I had been rejected but told theyd possibly have another opening soon and would like to reconnect. They did, and happily ever after.

My drive comes from a few things: initially a love for computer games, then an introduction to visual basic, to basic conditional programming, script kiddy stuff and finally I wanted to learn how to build ethereum dApps. Today, I'm still in training wheels, but I got the OK from my CTO to start learning solidity!

In closing, I'd like to stress soft skills. Things like positivity, being humble, taking and receiving criticism gracefully, being someone that other people enjoy being around. I was and still suffer from depression, but therapy ( cognitive behavioral therapy ) and following: how to win friends and influence people, really helped change my attitude. I made sure to fail fast and turn everything into a learning opportunity.

Good luck, cscareerquestions!",2018-10-29 19:17:38
"Tip: ""fake it til you make it"" refers to emotions, not skills/knowledge",1240,8ufm10,https://www.reddit.com/r/cscareerquestions/comments/8ufm10/tip_fake_it_til_you_make_it_refers_to_emotions/,93,1530181769.0,"I occasionally see the advice ""fake it 'til you make it"" brought up in the context of being a junior developer and in relation to impostor syndrome. It has always bothered me for couple reasons: 

1) If someone is worried about being an impostor, telling them to 'fake it' seems to be just adding to that pretty directly -- the very *definition* of an impostor is someone who fakes something. 

2) In healthy environments, it is rather hard to fake skill or knowledge for very long. You'll run into problems delivering and ultimately end up in a conversation about performance.

However, I've recently realized the conditions under which that phrase make sense: When the 'it' you faking is your emotional state.

So for example, if you walk into an interview and inside you are feeling nervous but you use confident body language, that will make you feel more confident. That 'faking it' actually caused a change in the real situation. 

---------

In contrast, if you are working on a problem involving debugging some container setup and you try to ""fake it"" and act confidently in your knowledge and ability to solve the problem without help...that won't actually tell you anything about port forwarding or cgroups. Instead, when you start 'faking it', you'll feel like you have to go heads-down and do a bunch of research yourself in order to be able to live up to whatever you promised about your knowledge. This is the *wrong* thing to do and can lead you down a 4-day rabbit hole... which holds your team back.

How to approach situations where you feel tempted to fake knowledge or skill relies on a few things:

 * [Know that confidence isn't about believing you are smart. Its about believing its okay to be ignorant](https://www.youtube.com/watch?v=0Tk82hEHNnY). If you abstractly know this to be true but you still get butterflies in your stomach, that is okay and a good place to apply ""fake it til you make it"" until your intuition catches up with your logic.

 * Be in a team which allows you to [have the psychological safety](https://hbr.org/2017/08/high-performing-teams-need-psychological-safety-heres-how-to-create-it) to admit a lack of knowledge. This is one of the most important things to judge a team on when you are interviewing. Building this trust is also one of the things important to do in 1-on-1s. (NOTE: This is mostly on management to be supportive but partly on you to swallow the discomfort of taking on your insecurities)

 * Have self-knowledge which close-to-correctly reflects your level of skill. If you don't know anything about webpack, you should want to believe that you don't know anything about webpack. If you know a sizable amount about webpack, you should want to believe that you are pretty good at working with webpack. (NOTE: I should make this section more clear. There is also a category of skill where you’ve never worked with the specific tool but could spend 30 minutes and judge the scope of a problem or decide what questions need to be answered. There’s also something to say about getting out of your comfort zone and stretching yourself while still keeping a cool comminicative head)

 * [Be skillful in asking for help](https://jvns.ca/blog/good-questions/) in a way that sets your answerer up for success. Be able to ask questions like ""who is a good person to talk to about X?"" or ""what are the important things to focus on when learning about Y?"" which let you guide your learning.

Your job as an engineer isn't to know all the things but to take responsibility for communicating about and negotiating for the resources you need. That way, your team lead can delegate something to you and walk away thinking ""okay, that's being taken care of and I can worry about other things. If anything comes up, he'll let me know"" Those resources can include guidance in planning something, time in your own roadmap to spend explicitly learning about something, or a half hour on someone's calendar to walk them through your plan and challenge assumptions you didn't realize you were making. Without the ability to be honest with yourself and your team about gaps in your knowledge, it is incredibly hard to work up the courage to ask. But with that self-knowledge and a healthy organization, it often only requires asking.

[""If you know the enemy and you know yourself, you need not fear the result of a hundred battles""](https://www.youtube.com/watch?v=FdbloUQrDLw)

EDIT: verb tenses

EDIT: Thank y’all for the comments — they’re helping me clarify my thinking on this. If you’ve got a different way that you read that advice, please post it; I’m all ears.",2018-06-28 06:29:29
Would any of you be interested in livestreams of an experienced candidate solving questions?,1229,b64z0c,https://www.reddit.com/r/cscareerquestions/comments/b64z0c/would_any_of_you_be_interested_in_livestreams_of/,147,1553724744.0,"For context, I'm someone who's gotten offers from Google, Amazon, Uber and several other tech companies in the past. Would anyone be interested in watching me walk through and solve these problems in real time? I usually struggle a little through all questions but end up solving them.

Also, open to suggestions on which problems to solve. Thanks!

**Update #1**: Well the response has been overwhelming. So, I will make my first video tomorrow (Friday) evening at 7pm EST. I will try to do at least one stream every week.

* I will pick something that's Leetcode medium. In order to keep it honest, I will pick something at the beginning of the livestream.
* I will timebox myself to 45m.
* I will use my iPad Pro to emulate writing on a whiteboard.
* Chat will be enabled. I will have someone moderate the YT comments/questions for me to make sure someone doesn't give me hints.
* Videos will be available for later viewing for those who can't watch it live.

Here's my YT channel: https://www.youtube.com/channel/UCM6SejOjga8sIlhJlJdHchQ/
PM me for questions or comments.",2019-03-27 18:12:24
Name and Shame: Capital One,1230,chrdif,https://www.reddit.com/r/cscareerquestions/comments/chrdif/name_and_shame_capital_one/,291,1564107294.0,"Let me just start out with this initial disclosure; I have never been interviewed by a company more dismissive, disrespectful of my time, and frankly lazy.

Even though this is a name and shame, they were very organized and did not ghost me. Which I do appreciate.

That being said... What the fuck capital one? 

Everything was fine until the final interview.

So if you aren’t familiar with C1s interview process they have a final “power day” where they do a bunch of rapid fire interviews with a bunch of people in the company.

This is flawed because every single one of them ran out of god damn time, I didn’t have a chance to as a single fucking question. 

Every single person that I interviewed with in person was only concerned with immediately bailing to go to another interviewee that I imagine they also gave 0 flying fucks about.

They gave some coding refactor challenges on a piece of paper, literally the stupidest shit ever, it was just a god class with a bunch of if statements. Someone with 1 week of Java experience could have understood this. (Sr software position btw).

So the interviewer ask me to refactor it and I do, and any question I ask gets shot down, WHILE HE IS SITTING ON HIS GOD DAMN PHONE TEXTING WHILE INTERVIEWING, not just a one off thing, no no.

He was texting for damn near 50-80% of his portion of the interview. I almost, and frankly should have, walked out.


I had around 5 different people total in person, here’s how I’d say it went.

0/10 Business guy totally displaced from the tech. He talked the entire time, asked no questions, I had no chance to respond or as questions.

-fuck you/10 Guy fucking texting and being a general asshole. Obviously didn’t want to be there. 0 feedback, this was the if statement guy

4/10 One was a bit of a prick, two person interview. It was pretty loosely goosey. 0 feedback and immediately left when hitting their timestamp

2/10 Guy was kinda a sperglord, asked questions that he said couldn’t be memorized. If anyone wants a link to the article he got the questions from in order to memorize the solutions LMK. 0 feedback during the entire time.

They can eat my fucking shorts, let me arrange it in the business 101 STAR solution format for you “professional businessmen”. (I’m not even fucking joking here they used those dumb ass businesses 101 acronyms for common sense shit).


Edit: this blew up. Been a lot of good discussions here, had a good time y’all. I’ve gotten a job at a really awesome finance place that I’m looking forward to so all is well!

@capital one Thanks for leaking more social securities asshats! Is this the 8th or 7th time now? I’m sure you’re recruiting only the best tech wise... Let’s write down a SMART solution to not do it a 9th time.",2019-07-25 22:14:54
"I had trouble getting bites on my applications. Then I stopped checking ""I have or had a disability.""",1212,88b07i,https://www.reddit.com/r/cscareerquestions/comments/88b07i/i_had_trouble_getting_bites_on_my_applications/,325,1522451160.0,"This is kind of interesting and disappointing to me. I have a good resume, a 3.93 GPA, a couple of letters of recommendation (one from the editor of one of the biggest CS research publications in the US), and a not-too-shabby portfolio. But out of nearly 70 applications - mostly to local companies, even - I only got two responses. Didn't get either opportunity; they had hired someone else before even scheduling my interview.

I've never thought twice about checking, well, any of the boxes for reporting demographics or disability status. Honesty seems important when it comes to things they'll learn anyway in the interview. Plus, they talk all about how they legally can't discriminate, and they make a big ruckus about how that they even get bonuses from the government for taking on disabled workers! My disability is minor - I have a crappy lower back that I take medication for and it doesn't really impact anything that I do, but it was notable enough that I ended up registered as disabled. So if a company wants to use my semi-trivial condition to make stacks off the government, why not!

But then I started feeling really down on myself about not getting a single bite on these applications. Threads on this forum always say *you need to stop looking at the big companies and go local*! Well, I was already doing that; I don't want to move out of state, and certainly not to California or Seattle or anywhere else with outrageous cost of living, so I only applied to the likes of Google if they had openings in the local office. *You must have a bad resume*, well, apparently it's bad in a way that no career professional could spot, because I had plenty of people look it over. *Your portfolio must be underwhelming*, but in all of my applications, not a single person even viewed my portfolio.

It really sucks to get shot down when you should be at the very top of the candidacy list. So I finally decided on one simple lie on my application. I didn't click ""I choose not to disclose my disability."" I went all the way over to ""I do not have a disability"" while applying for 8 positions.

I got 5 emails and one phone call that week. One email asked me in the very first exchange what my expected salary would be. They didn't disappear when I gave them a vague range about 10% higher than the local going rate - they called the number I left in my response 2 hours later.

I'm kind of overwhelmed now by all of it, really. It feels like being thrown into the deep end. I'm being really skeptical as I approach these interviews I've got lined up because it feels like there has to be some catch here. While it could all just be coincidental, it seems unlikely - and that really makes me angry. I think that's what I'm feeling most right now. I've been told that disability information typically isn't even shown to the hiring folks for the sake of legal liability. But wow.

Has anyone else had this experience?

Edit: Whoa gold, thanks so much guys! It's both depressing and encouraging to read the replies here. I think what I'm maddest about is the idea that there were some good companies I may have had an opportunity to interview with if I hadn't checked that box - the places I'm talking with now will be good money and okay work, but they're definitely not in fields I'm excited about and are mostly my ""bottom picks."" So part of me still hopes it's a coincidence or a statistical anomaly. Hopefully experience and networking with these companies will at least get me into CS work that I'm more passionate about!",2018-03-30 19:06:00
PSA Most people in CS don't make crazy high salaries,1195,7vpufg,https://www.reddit.com/r/cscareerquestions/comments/7vpufg/psa_most_people_in_cs_dont_make_crazy_high/,771,1517973997.0,"TL;DR A salary less than 100k is more normal. Don't come into the field expecting 200k in options.

This sub tends to get both ends of the curve and not so much the middle in terms of people. You have people who get 300k total comp new grad offers and you have people who can't find a job after 2 years. Naturally it might prompt some people expect such high salaries. Then some people get bummed out when they don't have high salaries like that and that leads to posts like ""Am I not good enough?"" Most new grad/entry level salaries in most places is about 60k-80k if you adjust for cost of living. Most companies outside of the big 4/unicorns don't pay these high salaries.

For all the folks who have several years of exp the normal is anywhere from 90k-120k total comp if you adjust for cost of living. Now if you're a director/vp/cto you obviously make more but that's a very small percentage of people. 

Furthermore, people need to calm their tits when they get these offers and they assume they won't make it. If you're single you really only need about 25-30k to survive. Anything more is just spending money. For folks with a partner you only need about 30-35k, + 10k ish for each child. 

Don't let the fact that you don't make a high salary affect your morale or your confidence.
",2018-02-06 22:26:37
What's the point of an intern acceptance speech on Linkedin?,1190,asb377,https://www.reddit.com/r/cscareerquestions/comments/asb377/whats_the_point_of_an_intern_acceptance_speech_on/,263,1550616093.0,I've been noticing people making these 2-5 paragraph long posts on Linkedin talking about all their offers and who they end up picking. Usually pretty cringy and I stop reading by 1st paragraph. Is this actually normal and should interns be doing this?,2019-02-19 17:41:33
"A senior engineer at work got upset with me and basically told me I was a ""diversity hire"" and I don't know what to do.",1188,cp2ew5,https://www.reddit.com/r/cscareerquestions/comments/cp2ew5/a_senior_engineer_at_work_got_upset_with_me_and/,375,1565586529.0,"Hi guys,

I started my first CS job out of college a month and a half ago for a rather large company. I have been struggling to keep up with all the information, tech and fast-paced environment, and I think I have been asking way too many questions as well. I have a learning disability, but I have been trying my hardest and I am never on my phone or anything, it just takes me a while to learn things. A few days ago, the senior engineer who is also my mentor, got upset when I wasn't able to answer a few questions about the feature that my team was working on and basically told me something along the lines of ""I should have known I would have received this kind of low-effort from a diversity hire"". I didn't ask him anything about it, I sorta let it go, but it has been haunting my thoughts this weekend. I'm a little upset and concerned now. This engineer was one of the 4 interviewers that I had when I was interviewing for the position, and I assume that he would actually know if I was a diversity hire or not? Either way, is my job safe? Am I at any higher risk of getting fired or let-go because of this? I legitimately did not think I would be a diversity hire, so I oddly hope he was just saying this to make me feel bad.

Any advice?

&#x200B;

Edit: Thank you for the support everybody. I will talk to HR tomorrow.

Edit2: For anyone who is still following...this is what I did. The HR department had a service for making an anonymous tip. I made an anonymous tip about workplace harassment, but I did not mention anyone by name or location. I listed everything that happened without giving out personal information. I made an email address without any personal information and listed it in the tip and said that they can reach me through that if they want more info. I'm not sure if I will get a response, but that was what I was comfortable doing. If I don't hear back, i will try to reach HR directly.",2019-08-12 01:08:49
"Do you feel tech companies try a too hard to make their place of work look ""fun""?",1183,b0bn2k,https://www.reddit.com/r/cscareerquestions/comments/b0bn2k/do_you_feel_tech_companies_try_a_too_hard_to_make/,510,1552446308.0,"I've been looking into different places to work recently. I like where I work but I'm thinking it might be time for a change. After some browsing to see whats out there it seems like every tech company career page goes over the top to make their company look like its some sort of adult preschool or leisure center (adults in consumes, free food, rock climbing group activities).

&#x200B;

I don't mean to be negative but it seems a bit over the top.

&#x200B;

Just to poke some fun at it I made this starterpack [https://i.redd.it/i966yjcdbpl21.jpg](https://i.redd.it/i966yjcdbpl21.jpg)

&#x200B;

What are your thoughts? Are companies taking the whole 'make work look like play' thing a bit too far? ",2019-03-12 23:05:08
LPT: No one ever advanced their career pointing out the faults in the people around them,1172,cu1cfq,https://www.reddit.com/r/cscareerquestions/comments/cu1cfq/lpt_no_one_ever_advanced_their_career_pointing/,154,1566526708.0,"Saw this story on /r/ProRevenge. Don't be like Fred:
>https://www.reddit.com/r/ProRevenge/comments/ctmlqb/make_my_life_at_work_miserable_youll_never_work/

tl;dr - don't be the person who no one wants to work with. Even if your coworkers are all idiots (hint: they aren't) or the software you work with is total crap, written by morons (hint, it isn't), you never want to gain the reputation Fred had by the end of the story.",2019-08-22 22:18:28
"Name and Shame: Ellucian, they have absurd non-competes and they sue",1140,9dwqub,https://www.reddit.com/r/cscareerquestions/comments/9dwqub/name_and_shame_ellucian_they_have_absurd/,127,1536371372.0,"I have almost 20 years experience. I turned the job down. It was for a very senior position. I am not going to say what since I don't want them to figure out who this is from. 

When I got the offer, it also included a 'non-compete clause' that said I could not work for 'any of their competitors'. No name. Just anyone they considered a competitors. 

When I interviewed for the job over a year ago  I googled ""ellucian non-compete clause' There were a lot of posts on it saying

1. They make you sign a more strict one when you get laid off if you get a small severance package

2. They sue people who were laid off for violating the non-compete

3. posts on glassdoor about how people are pressured to put up positive reviews. There are 500+ reviews. This is absurdly high for a company this size.

All of this is gone. Even the glassdoor reviews that had the word 'legal action' and non-compete. MY NEGATIVE review about the non-compete is gone. Ellucian scrubbed it from glassdoor. You can probably pay glassdoor to have bad reviews taken down or they threatened to sue. 

Don't work for a company like this. 

",2018-09-07 21:49:32
"To all those who are struggling with computer programming or doubting their abilities, or to those considering a mid-life career change. I’d like to share a bit of my story.",1138,9z5608,https://www.reddit.com/r/cscareerquestions/comments/9z5608/to_all_those_who_are_struggling_with_computer/,155,1542849445.0,"I’m 37 years old and I’ve had a lot of jobs. Like A LOT. I have been a roofer, a welder, a framer, worked at grocery stores, at a small-town newspaper, every major gas station chain, built air conditioners at Trane, and even worked as a baker for a bit. Up until 6 years ago I was a mechanic. Suffice it to say, I’ve always been a bit lost career-wise. I had a bad habit of working at a job for about a year, getting bored with it, and quitting. Usually by just not showing up again. Looking back, I feel a bit shitty about it all. 


Five years ago, my wife and I moved with our 2-year-old daughter to southeast Iowa (US) to attempt to re-start my father-in-law’s tofu company. Logistics caused us a lot of headaches and it fell through pretty quick. We found ourselves in a town of 9,500 people without much in the way of job prospects. The blue-collar life had taken its toll on me, and I had no interest working on rusted out cars in some seriously harsh winters. I needed something else. There was a community college about 30 miles away that offered some attractive associate degree programs, generally 24-month technical degrees in robotics, photonics, geospatial technology, electronic engineering, etc. I threw a dart at a map and chose software development. The only experience I had in any kind of programming was when I would mess around with the html in my MySpace background 15 years ago. I really had no idea what it was all about, but I had the opportunity to go for it. I consider myself to be of average to moderate intelligence and I’m good at taking tests. The program didn’t dive too deep into actual computer science and I didn’t have too much of a problem following the logic and theory of programming. So while I struggled a little I made it through with good grades. 


Six months after graduating, I got a job at a major retailer in Wisconsin and set to work. And. I. fucking. hated. it. I felt like a fucking idiot on a daily basis. I couldn’t wrap my head around the real-life application of computer programming, having only really followed along to tutorials and step-by-step assignments in school. I was working in an obscure language with very little online community support, so Stack Overflow wasn’t there to save me. I was just lost in it all. Our office was pretty relaxed as far as our schedules were concerned, so I would make excuses to leave early a few times a week just to get away from it. I was beating my head against a wall and getting pretty much nowhere. For the next two years, I watched the other developers who were hired the same time I was sail through projects, get assigned higher priority work, get promoted, and seemingly really get in the groove of things. And here I was, circling the drain. I felt doomed. Not only did I not feel like I fit in with the company (I’m covered in tattoos, and this was a pretty conservative Midwestern company), my wife and I didn’t fit in with the town (again, a couple progressive old punks in the Bible Belt). I felt like my manager, who was actually really great, was just waiting for me to quit so he wouldn’t have to fire me. My mentor was awful and never had time to help me. I felt like I was bothering the senior devs with my questions. My code reviews were nightmares. I just felt like I wasn’t meant to be a programmer, and the proof was all around me. I wanted to give up.


But I couldn’t. I knew I owed it to myself and to my family to at least try to find work with a different company. If I went somewhere else, and had the same experience, then I could say that I just wasn’t cut out for this type of work. I started applying for jobs everywhere I could. I looked into where grocery stores had their headquarters, where insurance companies were based, if banks and credit unions needed developers, hospitals and state/local government departments, and so on. I knew I wasn’t Google material, and I knew I didn’t want to work for a start-up, so I looked for jobs that weren’t on everyone’s radar. I ended up focusing on Austin, TX. I had family living there and there are a lot of job opportunities. But I wasn’t getting any callbacks being in Wisconsin. My wife and I decided to take the leap and move to Austin without having anything lined up, I always had my mechanic experience to fall back on. **Disclosure: I feel amazingly fortunate that I was able to make this move, and I understand not everyone would be able to just up and move across the country.**


Things changed real quick once we got to town. I interviewed for and was offered a software developer position within two weeks. It has been a month now and it is COMPLETELY different than my experience in Wisconsin. My co-workers are awesome, my mentor ACTUALLY mentors me, the team leaders really go to bat for their developers, and the overall environment is incredibly encouraging. Things click a lot more for me now and I no longer feel like I ‘just don’t get it’. I work in Python and Django mostly, which I am really enjoying. My job is in the public sector, so there is no more working to increase profits for a billionaire boss. I look forward to coming into work! I was on the verge of giving up on programming, now I can really see myself here for the foreseeable future. If you think you can’t make it as a programmer, you owe it to yourself to stick with it. At least try a different job, it really could make all the difference. 


**TL;DR** A mid-life career change into computer programming is totally possible, even if you have no experience. If you find yourself struggling/doubting your abilities early on in your career, the problem may not be you but actually your environment. You owe it to yourself to not give up, but instead to find a job that will support you in your learning. 


Edit: PARAGRAPHS",2018-11-21 20:17:25
It's so cool that educating yourself even further is a part of the job.,1134,c09yk0,https://www.reddit.com/r/cscareerquestions/comments/c09yk0/its_so_cool_that_educating_yourself_even_further/,162,1560481664.0,"This isn't much of a question, but I just really want to share this story.

I went to the person who is in charge of me and sort of just dumped my inner negative impostor syndrome feelings onto them. In short, I basically said, ""I feel so useless that a lot of the things I have to do require me to study them. I feel so bad that I didn't know them beforehand"", to which they replied, ""Hey, learning is a part of the job. We didn't hire you because we assumed you knew everything. That's impossible in this industry. We hired you because we saw potential, and seeing how much effort and willingness you put into learning new material is a testament to the truth of our faith in you. Dont worry, you're doing a great job. Continue learning, applying, and growing.""

I swear, I was about to break off into tears right then and there.",2019-06-13 23:07:44
"So, I just erased our JIRA database",1131,aglvqr,https://www.reddit.com/r/cscareerquestions/comments/aglvqr/so_i_just_erased_our_jira_database/,375,1547679234.0,"I am working as a DevOps for about 2 months and a half. Today I was supposed to migrate our JIRA to another server, the old server hard drive was mounted on another computer using an Ubuntu live CD.

Super simple, right? I was trying to export the postgres database and I used a chown to change the data directory owner's to the postgres user. The folder simply vanished and there's no backup.

I'm fucked. Did anyone passed through a similar situation?

\[Update\] Thanks to /u/[Happy\_Recognition](https://www.reddit.com/user/Happy_Recognition)'s [comment](https://www.reddit.com/r/cscareerquestions/comments/aglvqr/so_i_just_erased_our_jira_database/ee8flse/), I located the automated JIRA's backup on the server and I was able to restore it on my local machine as a test. Thank you for all the amazing support, and also you guys made me laugh a lot.  


Curiously, the CTO himself didn't know about these backups. JIRA was set up here 5 years ago by a guy who no longer works for the company, and it seems that nobody messed with the setup, since it was working perfectly. For anyone wondering why we don't use a cloud service, like Amazon, it's because we're actually a cloud service provider company!",2019-01-16 17:53:54
Does anyone else think we are in the greatest career ever?,1127,cbvs9g,https://www.reddit.com/r/cscareerquestions/comments/cbvs9g/does_anyone_else_think_we_are_in_the_greatest/,465,1562881096.0,"The job is not physically demanding. The pay is extremely well. The schedule is often flexable. You sometime dont even have to leave your house to work. Some jobs feed you lunch and offer other odd benefits. Employment is stable and it's not hard to find another job if need be. Devs are in high demand. You can listen to music or podcasts all day long while you work. It really is better than almost any other career out there.

Only possible downsides are stress due to strict deadlines, and micromanagement from the boss. Both of which I don't experience.

Edit: Yes, I know some people are famous etc etc. I'm not talking about lottery ticket careers here.",2019-07-11 17:38:16
"Never take a verbal offer as final, if you don't have it on paper you don't have an offer.",1107,cwkxg6,https://www.reddit.com/r/cscareerquestions/comments/cwkxg6/never_take_a_verbal_offer_as_final_if_you_dont/,125,1567028241.0,"Just a reminder. I never thought it would happen to me, I always took precautions just in case but figured it was silly and ""apocalypse planning"" to hold off until you get a written offer before you have the job because a verbal offer is an offer right?

Well it just happened to me, I went through 2 technical interviews, and one phone screen with a company for a part time after hours side-job. I got a verbal offer 2 weeks ago and haven't heard back since, I sent out an email to the director that offered me the position but haven't gotten a response back in 4 days. I already told my family and some coworkers that I got the job after I received the verbal, so now I need to go through an awkward conversation with them about that.

I know I could probably call and get someone to pick up but it's not really worth my energy now. Whether it is because I slipped through the cracks on a clerical error or they decided not to hire me doesn't really matter at this point.

Always get the paper guys, if this was a full time job I was moving to from my current position there would have already been rumors floating around the office about me leaving, and even though I doubt it would affect my employment it would have been a very very uncomfortable conversation to have with my manager...",2019-08-28 17:37:21
Is there a calmer community similar to this one?,1110,b8dy9x,https://www.reddit.com/r/cscareerquestions/comments/b8dy9x/is_there_a_calmer_community_similar_to_this_one/,528,1554205143.0,"I'm so tired of the Silicon Valley/Big N/Leetcode/'220k salary for a new grad internship ok?' circle jerk.

I just want to see discussions of an _actual_ career in Software Dev. and Computers without having to go through 100s of comments of the above.

People dissing others for being happy making whatever in Croatia because 'lol wtf why u don move SV nub, I got 20 offers @ 200k omg' 

And then, on the other hand, seeing the depressing threads of perfectly fine developers going full depressed spending time here comparing themselves to these people who live/breathe SV and nothing else.

Where can I find discussions on mastering your craft, honing your skills the slow, steady way; loving what you do, etc. that's not tied to specific tech.?",2019-04-02 07:39:03
"As someone applying for jobs, its so awesome when a company like this that tells you why they arent interested instead of just ghosting you",1102,apb7jo,https://www.reddit.com/r/cscareerquestions/comments/apb7jo/as_someone_applying_for_jobs_its_so_awesome_when/,125,1549878911.0,"

https://i.imgur.com/WoNRfGA.png",2019-02-11 04:55:11
Another data point on industry hire in the bay,1098,cdp9yz,https://www.reddit.com/r/cscareerquestions/comments/cdp9yz/another_data_point_on_industry_hire_in_the_bay/,526,1563262680.0,"Hi everyone, I just went through a round of interviews and wanted to share a data point. Also, I wanted to share some interview tips that you may not have seen before. I'll answer questions in AMA style.

**About me**

I’m a software engineer with 5 years of experience in the bay area. Bachelor's degree in engineering at Waterloo. I don’t consider myself special talent, but I think I’m pretty good at interviewing. I've worked at a couple startups before joining G back in 2017. No specific expertise to brag about, but I have a good history of doing cross-stack work.

**Offers**

I interviewed at Airbnb, Facebook, Lyft, Uber, and 3 other companies. I received offers from Facebook, Lyft, Uber, and 2 other companies. First year total compensation ranged from 380k\~500k from both public and private companies, 2nd year comp was around 400k for most of them. The offer numbers correlated with my interview performance, and from my research, it seems like some companies offer standardized offers to every candidate. Surprisingly the private companies did not beat out the public companies in equity package. Breakdown was around 180\~210 base, 500\~800 equity, and 0\~100 sign-on.

**Process/Scheduling**

* I set a measurable goal for prep. 200 Leetcode questions, 10 system design problems, deep-dives of my past projects, and recollected my past experiences for behavioral questions. Whole process was 3 months.
* Did mock interviews on [interviewing.io](https://interviewing.io/) throughout the process.
* Got referrals on [repher.me](https://repher.me/) for the more obscure companies.
* I had a buddy the entire process who was also looking to switch. He went from 85k to 300k TC (crazy). We did mock interviews everyday.
* I did my phone screens during lunch hours, and scheduled onsites over span of 2 weeks, using all my vacation days :'(
* Schedule the companies that you don't want in the beginning. I bombed my first interview lol.

**Interviews**

It's common knowledge that you should prep for Leetcode-style questions, and system design if you're interviewing for senior positions. That's what I did 2 years ago to get into G, but the interview formats were slightly different this time around:

1. **Phone screens were more difficult.** I'm not sure if it's because I was being considered for senior positions. In one phone screen I had to explain what a BST was, implement algo to check if tree is BST, explain LRU cache, implement it, then design Twitter timeline. Every step of the way I had to give the tradeoffs and time/space complexity, as well as analysis of the design and writing/analyzing some SQL queries. 2 years ago I got mostly Easy/Medium Leetcode questions.
2. **Practical coding was heavily emphasized.** Almost every company I interviewed at had a practical coding round, where I was given a task (building a feature/scripting/debugging). You can bring your own laptop and I recommend that you do. You can also search the internet while coding. I think they look for fluency in programming, as well as how you break down problems. I say this because I got an offer despite not completing a task. I think this is a trend that will continue until proven to be ineffective.
3. **Behavioral interview is more important than design**. Every company I interviewed did a deep-dive of my past projects and experience. Recruiters told me that this interview is more important for determining level than the design interview. I can see why. Most design interviews aren't conducted properly. Questions are often too large in scope and too much time is wasted in narrowing it down, and you only have 30\~35 minutes when you account for the intro/closing. High-level ideas can be BS'd, and most of the interesting design decisions are lower-level. The level of depth is dependent on the interviewer's experience level, making it highly variable.

**Leetcode**

I've done around 300 Leetcode problems lifetime. This time around I did 200 but a lot of it was questions I've done before. Leetcode tips are all over the Internet, I'll leave some tips I haven't seen online.

* Do these questions [https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU](https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU)
* Find the brute force solution immediately, and tell the interviewer so that they know you're not an idiot. Too many candidates trip themselves up trying to find the silver bullet. Optimize the brute force solution if you can, and that will lead to a very good answer most of the time.
* Example: [trapping rain water on leetcode](https://leetcode.com/problems/trapping-rain-water/). The brute force solution is to find the amount of water trapped at each index, by scanning for the largest values to the left and right. This is n\^2. Then you optimize by caching the largest values to the left and right instead of scanning. Now it's linear. You know that it can’t be faster than linear because you need to look at each index.
* Even when you’re peeking at Leetcode solutions, understand the brute force solution first and try to work your way up to the optimal solution. Jumping straight into the optimal solution without explaining the brute force solution will raise red flags. Readability is just as important as finding the very optimal solution. Solutions on Leetcode Discuss score low on readability.
* Put trivial computations into helper methods that you tell the interviewer you will implement later. Generally they won’t ask you to implement these helper methods. For example, finding the min/max in an array, it’s so trivial that you don’t need to write out the whole method. It also shows that you are comfortable with translating ideas into code.

**Design**

* I used Grokking the system design interview on educative.io and system design primer on github. I recommend it, but these are surface level material and if you regurgitate the content you will fail. I recommend it as a starting point.
* They recommend this structure: requirements, load estimation, API, data schema, high-level architecture, detailed component design, and scale. This is a good structure in my opinion.
* The problem with these contents is they spend too much time on high-level/drawing boxes, but when they go deeper they are not going deep enough, and tend to focus on the wrong things. I personally believe the most important part of the design interview is the API.
* Generally the interviewer will give you a problem definition and they’ll tell you the feature scope and maybe the usage characteristics (daily active users, for example). You should clarify until you understand the problem, don’t clarify for clarification sake.
* I personally believe API is the most important part of a design interview, and no other content online will tell you this. Think about it, when you’re designing something at work, that’s the one thing everyone cares about. Implementation details are done within the team or on your own. The API is where cross functional collaboration and discussions happen. Grokking and primer don’t cover API in enough detail.
* Write down each API and discuss the policies. For example, when designing a queue, you have enqueue/dequeue API’s. Does dequeue guarantee that the same element will be dequeued on subsequent call or not? This changes the entire system. Let’s say you’re designing a sendMessage API for a chat app, who generates the message ID? Server or client (it should always be client btw, and think about why, it changes everything).
* From API discussions, the data schema, high-level architecture, and services should be easy to draw out. Data schema will roughly reflect the API request/responses, services will be scoped to support a set of functionally related API’s.

**Behavioral/Deep-dive**

*""If you’ve never failed, you’re either inexperienced, a liar, or unaware"" - somebody*

* Don’t be afraid to show your flaws. In fact this is where most candidates fail. Interviewers can tell if you’re BS-ing them. Be genuine.
* If you’ve never failed/had a conflict/lost an argument, you’re either inexperienced, a liar, or unaware. All are bad signs. I was asked to provide a concrete example of a time I had a disagreement, and I told the interviewer about a time I disagreed with something and lost (they liked it).
* This guy sums it up perfectly: [https://www.youtube.com/watch?v=PJKYqLP6MRE](https://www.youtube.com/watch?v=PJKYqLP6MRE)
* Go through your past projects and try to gain a deep understanding of the entire project, beyond the scope that you were involved in. Identify the key decisions you made, the high-level architecture, because you’ll need to be able to explain it to someone as if they are a newcomer to the team.

**Negotiation**

I believe there are 2 fundamentals of negotiation: knowing your market value, and having leverage.

1. **Know your market value.** Use [levels.fyi](https://levels.fyi/), Blind, your network to find out how much market value you have. It's strongly correlated with your level of experience and the company you're interviewing for. Do not take low-balls. Do not ask for unreasonable amounts. I've seen people get offers rescinded for over-negotiating.
2. **Have leverage**. Competing offers, good job situation, 1 million dollars in the bank, those are all leverage. If you have no leverage, then you need to fake it. I don't recommend faking leverage, because if you were able to get one offer you can easily get another one.

I didn't negotiate my offers beyond telling the recruiters what the other companies were offering me. This only worked because I interviewed companies that pay top of market earlier in the process. I also let the recruiters know how much I was expecting, and disclosed my current level/comp when asked (L4 at Google, so it would not have helped my case).

I dislike most of the online advice that tells you to play a game against the recruiter. Recruiters are human. Full transparency, and being genuine with the recruiter has worked well for me. Try to not make it all about money. If all your questions/comments are around comp, it signals to the team that you're just interested in money, which certainly doesn't help your case.

**Closing notes**

I found that through preparing for interviews that I did become a better engineer. The process of preparing for interviews challenges your mental fortitude and time/stress management. Prepping for design interviews is not as simple as reading Grokking/design primer, you need to gain a fundamental understanding of every decision that’s being made in the design, and this requires a lot of digging through the internet for content. *A lot of hate for Leetcode style interviews on this sub.* Doing Leetcode doesn’t make you a better engineer, but it makes you a better coder. A big part of our job is translating ideas/thought into code, in a way that others can read it and understand it. Leetcode problems are challenging because they test your ability to generate the idea, and to translate ideas into code.

&#x200B;

AMA

&#x200B;

Edit: Sad to see that ""discouraging"" became the top comment. I want to reiterate that I'm not a genius, and that I don't have special talent. Over the last 10 years I've been passed over in resume screen \~700 times, failed \~25 phone screens, and failed \~25 onsites. Obviously, the numbers are inflated because of Waterloo co-op, but it's not exactly genius LOL. I failed the Google onsite twice before I got an offer. And before I joined Google, I never had a choice between multiple offers.",2019-07-16 03:38:00
2 YEAR UPDATE: My journey & tips: 2.9 GPA at a small liberal arts college w 1 mediocre internship –> 4 FTE offers incl FB,1098,b3w1gg,https://www.reddit.com/r/cscareerquestions/comments/b3w1gg/2_year_update_my_journey_tips_29_gpa_at_a_small/,171,1553231281.0,"**Previous post:** https://www.reddit.com/r/cscareerquestions/comments/6278bi/my_journey_and_tips_29_gpa_at_a_noname_liberal/

(^ covers the basics which I won't really repeat here, like my timeline out of school or how I received interviews in the first place)

My last post here had an amazing response from all of you and now that it's coming up on 2 years—and with my recently going through another interview cycle—it seems like it's a good time for an update. I stand by my prior advice but do have some thoughts to add from a slightly more experienced perspective.

I also remember getting some questions about whether I'd actually be 'successful' at Facebook, i.e., whether studying so hard just meant I gamed the system and wouldn't do so well at the actual job, so I wanted to address that and general on-the-job tips as well. Finally, I haven't been able to answer the vast majority of PMs I get, so hopefully this will scale better / be valuable to those people in sub-O(n) time :).

**TL;DR:**

ended up doing relatively well at FB—two 'Greatly Exceeds' [expectations] / top ~15% performance ratings in a row—but felt like I was starting to learn less and wanted to switch from DE to SWE; studied 100+ hours in 1 month while working (focusing more on system design and ML this time); landed 5 offers out of 6 onsites, including Google and 2 unicorns; multiple offers were over $300k in total compensation (+50% from prev comp and at <4 YoE); negotiation matters a lot; and this whole process is nonlinear and often frustrating but it's 100% a winnable game and having tracking metrics helps (#trusttheprocess).

**Disclaimer:**


I'm sharing concrete numbers not to brag, but because I believe in pay transparency and think the information asymmetry in the tech industry between employers and employees hurts us. I don't want to rehash a debate over Big N / FAANG 'prestige' and am tabooing it here for reputation or brand value, which does have tangible benefits. Last and importantly, luck always plays a role in these things; I'm not suggesting this is a fully general solution but there are ideas here that will probably be helpful for you too.

**On my experience at FB (skip if you only want interview advice):**

I came into FB with definite imposter syndrome, especially when I was surrounded by people who had gone to Stanford or came here from Google or had PhDs etc. I wasn't sure if I could hold my own and wondered if I had just gotten lucky interviewing. Everybody at FB always says that the first few months is like drinking from a firehose of information—they're right. But eventually I found my bearings. To keep a long story short, I was in the right place at the right time when an impactful opportunity came along and I seized it. I received a rare 'Greatly Exceeds' rating my first half due to this—and more importantly, learned a ton in a short amount of time, both technical and soft skills.

Some job tips (keeping in mind that I'm not that experienced):

- Prioritization is critical and is a skill that can be improved: there are more things to be done than you can do
- Proactive communication: always communicate sooner and more than you think you have to
- Optimize for learning: if you don't feel like you're learning anything, speak up in your manager 1:1 (own your own career! and manage up), or explore other opportunities, internal or external
- Seize opportunities: see also https://pmarchive.com/guide_to_career_planning_part1.html
- Focus on impact: this is clichéd for a reason—you should always be asking yourself if what you're working on is the most important (not necessarily the most urgent) thing you could be working on

Re: prioritization, I really had it drilled into me how critical it was to say no effectively. You need to strike a balance. It's important both that you can say no to senior important stressed out people and that you say it in such a way that they're not disincentivized to come to you again in the future with more impactful opportunities. Practice helps here.

Re: optimizing for learning, I took advantage of the resources around me. I was a voracious reader of internal technical posts, data analyses, and architecture / system design write-ups, read any documentation I could find that interested me, studied the core abstractions written by the best engineers (h/t to Edmond Lau's The Effective Engineer), and generally tried to learn as much as I could whenever I could. Learning compounds over time and even small increases in your 'learning rate' make a big difference later.

When I first jumped on the above project, I was out of my comfort zone. But I was pretty confident I could learn what I needed to and tried to adopt a growth mindset to the things I didn't know. And I knew that being slightly uncomfortable (read: lost) was a good place to be in for growth. This mindset also helped when the inevitable missteps happened, which is where communication comes in too.

**On the interview grind part II:**

My process was broadly the same as last time, but more principled. At a high level, the most important thing is to trust the process. When you first start out, it's easy to feel completely stuck, like you're not making any progress at all. The learning curve is steep and nonlinear; some days you'll feel like you know less than yesterday. That's why I think it's important to have external metrics you can use to track your progress, because (especially initially) you can't trust your brain to have an accurate picture of how you're improving. I personally used time spent studying and number of Leetcode problems solved as my goalposts: I decided I would be ready when I hit 100 hours of overall studying and 100 LC problems solved.

So when you're struggling on a graph traversal problem for the 5th time or stuck on a weirdly difficult easy problem, you can at least see that you're, say, 4 total hours of studying closer to finding a new job and focus on that. This isn't to say that you should spend your time frivolously. It's important that your practice is deliberate and that you don't willfully neglect blind spots. (I knew I was weak at backtracking and at permutation-type counting problems, but I didn't want to face the struggle. Of course, one of my Google onsite rounds featured both.)

Here are the resources I used:

- Coding / Data structures & Algorithms: almost 100% Leetcode, a little Interview Cake and Elements of Programming Interviews but decided it wasn't as efficient
- System design: read all of [Designing Data-Intensive Applications](https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/) and [Distributed systems for fun and profit](http://book.mixu.net/distsys/single-page.html); went through the [System Design Primer](https://github.com/donnemartin/system-design-primer), scattered CS & industry research papers like [Bigtable](https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf) and [distributed consensus](https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf), tech company engineering blog posts, http://highscalability.com/, and some of [Grokking the System Design Interview](https://www.educative.io/collection/5668639101419520/5649050225344512)
- ML: had hands-on experience at FB so mostly googled random shit like this [Github](https://github.com/ShuaiW/data-science-question-answer), refreshed my memory of how the most common algorithms worked especially GBDTs and random forests, and skimmed [Hands-On Machine Learning with Scikit-Learn and TensorFlow](https://www.amazon.com/Hands-Machine-Learning-Scikit-Learn-TensorFlow-ebook/dp/B06XNKV5TS)
- Behavioral: emphasized certain themes in my elevator speech, prepared 2-3 stories for each of the most common behavioral questions, and had some solid questions for hiring managers (refer to the last post or to my study guide)

The system design portion was a bit overkill, but I actually enjoy reading about distributed systems. I believe it also contributed to getting max L4 offers at Uber and Snap (more on that below). This time around, almost every onsite involved at least 1 system design round. Pre-FB when targeting a lower level, I received essentially 0 such questions. 

Here's my study guide: https://workflowy.com/s/study-guide/RD5kZ682pWX5oxiE. Some parts are rough so take it with a grain of salt. The checklist of heuristics to try is particularly valuable imo; here's a condensed version:

1. Always consider hash tables (dictionaries) with their O(1)-ness.
2. If at all array-related, try sorting first.
3. If search-related, consider binary search.
4. Start with a brute force solution, look for repeat work in that solution, and modify it to only do that work once.
5. Space-time trade-off! That is, for better time complexity, try using auxiliary data structures. E.g., do something in a single pass over an array—O(N) time—by using a hash table—O(N) space—vs. doing something in nested passes—O(N^2)—without using any extra space—O(1). 
6. Remember that I can use two pointers.
7. Try a greedy solution.
8. Does solving the problem for size (N – 1) make solving it for size N any easier? If so, try to solve recursively and/or with dynamic programming.
9. A lot of problems can be treated as graph problems and/or use breadth-first or depth-first traversal. And if the problem involves parsing or reversal in some way, consider using a stack.
10. Any time you repeatedly have to take the min or max of a dynamic collection, think heaps. (If you don’t need to insert random elements, prefer a sorted array.)
11. If you have a lot of strings, try putting them in a prefix tree / trie.
12. To improve time complexity, also consider how various complexities match to solution structures and try working backwards from a target runtime.
13. Not quite the same as N-1, but sometimes a divide-and-conquer approach is what is necessary. If I know the answer for exclusive parts of the problem, can I somehow combine to get the final answer?
14. For puzzle problems or anything where we can enumerate all possible solutions and there's a notion of a partial candidate solution, consider backtracking.

**On the interview grind (cont.):**

I've (obviously) thought a lot about the Leetcode grind and one takeaway is that the entire process can be reduced to two overlapping recursive parts: 1) internalizing the comp sci building blocks and 2) knowing when to apply them. If you don't know how binary search works, you're going to struggle on a lot of problems. Conversely, if you can handwrite binary search in 60 seconds but can't recognize when a problem would be much easier with it, you're also going to struggle. The recursive part comes in when those building blocks themselves form more complex DS&A building blocks, like union-find/disjoint-set or Dijkstra's.

Leetcode is an exercise in both. As you do problems, you'll start to recognize common patterns and where a certain data structure or algorithm should be used. As you get stuck on problems, you may find that you have a gap in fundamentals—and that you need to go back and learn one of those algorithms more thoroughly. It's an iterative and even satisfying process.

Relatedly, there's a tradeoff here between improving pattern recognition and learning how to struggle. The naive and fast way to optimize for the former is to do as many problems as possible; when you get stuck, just look at the solution and move on. The problem is that you'll lose out on hard-earned insights that would therefore be more memorable. You'll also flounder when no answers are available, like in an actual interview environment. But you also shouldn't spend days on just 1 annoying problem. It can be tempting, but it's a big opportunity cost.

The balance I found was to set a timer for around 10 minutes: if I still had no idea where to begin by then, I would read the discussion but avoid looking at code; then I'd reset the timer and try to implement those ideas; if I still couldn't get a solution, I'd finally look at people's code and try to understand it. For particularly thorny problems, I'd put it on a list to do again later. 

In total, I studied for ~120 hours and solved 130 Leetcode problems—66 easy, 54 medium, 10 hard. I found hards weren't generally worth it except for the ""famous"" ones like LRU cache and skyline. I did about 10% of the problems on a whiteboard while verbalizing my thought process in a timed environment, but I was already pretty comfortable with that element.

**On the numbers and negotiating:**

I applied or replied to around 20 companies. After some weeding out, I went on to 11 phone screens: Google, Uber, Pinterest, Airbnb, Dropbox, Snap, Stripe, Twitter, Opendoor, Lyft, and Stitch Fix. Note that this rate is very very different from before I started at FB. Back then, I felt lucky if I received 1 rejection out of 25 blind applications—mostly I was ignored. It's obvious but getting your foot in the door is so perversely important.

For anonymity, I'm not going to mention all the specific companies' outcomes; also note that this was sometime in the last 6 months. Out of those 11 interviews, I passed 8. I received mostly LC mediums during these screens, but did get a few hards. I decided not to continue with one company and another happened too late for me to be able to do an onsite, which highlights the importance of timing. A company I really wanted an onsite with was my first interview and I bombed. Ideally, the interviews you care more about happen later in the process, but not too late. You want the practice but you don't want to burn out. You also want the offers to come in pretty close together for negotiation purposes.

Out of 6 onsites, I received 5 offers: Google, Uber, Snap, and two others (companies D and E). Google is notorious for downleveling, so their offer was pretty low. The initial offers (total compensation using FMV and without signing bonus) were:

* Snap: $300k 
* Uber: $290k
* D: $230k
* Google: $225k
* E: $220k

I was surprised by Snap and Uber but I knew I had done very well on those onsites. During Google's I had bombed a round (that backtracking + permutation LC hard combo). So overall numbers were according to expectations and my main negotiating goal was to get as much of a signing bonus as possible, knowing that base and equity were already at the top of the range. I didn't really try with Google since their offer came almost a month later and the difference was too big.

During this timeline, one thing I made sure to do was let the various recruiters know of other onsites or offer deadlines. It's usually in your best interest to do this, particularly if the other company is a ""peer"" or has a good reputation. You can even use an upcoming impressive-seeming onsite as implicit leverage to improve an offer, even if you don't end up passing the former. I think this contributed to the high initial offers. 

For negotiation, I relied on [Haseeb's amazing posts](https://haseebq.com/my-ten-rules-for-negotiating-a-job-offer/) and [Kalzumeus' seminal piece](https://www.kalzumeus.com/2012/01/23/salary-negotiation/) and [followup](https://www.kalzumeus.com/2016/06/03/kalzumeus-podcast-episode-12-salary-negotiation-with-josh-doody/). I don't think giving the first number matters much, but what does really matter is knowing your market value inside and out and standing your ground. [Levels.fyi](https://www.levels.fyi/) is tremendously useful for this (click the level to see the numbers and backing spreadsheet), as is Blind (e.g., [this Google post](https://www.teamblind.com/article/google-engineer---total-compensation-in-us---ultimate-post-jYcrij5X)), toxic though it sometimes is.

Haseeb's advice on using ""I will sign right now if you can make $X happen"" at the end is another great tip. I ended up getting multiple $50k signing bonuses and improving the other offers by ~$20k each.

**On concluding:**

Thanks for reading this far—I swear I tried to keep it short. I feel guilty that I haven't been able to reply to so many PMs, but promise I'll be active in the comments here. 

It's only been a few years since I read this subreddit obsessively and thought I'd never be able to ""make it"" in tech. But it really is doable. Trust the process. Stay calm and leetcode on.

AMA!
",2019-03-22 01:08:01
I got asked LeetCode questions for a dev-ops systems engineering job today...,1083,c017up,https://www.reddit.com/r/cscareerquestions/comments/c017up/i_got_asked_leetcode_questions_for_a_devops/,436,1560428185.0,"I read the job description for the role last week. Kubernetes, Docker, AWS, Terraform - I thought cool, I know all of those! Proceeded to spend the week really brushing up on how Docker and Kubernetes work under the hood. Getting to know the weirder parts of their configuration and different deployment environments. 

I get on the phone with the interviewer today and the entire interview is 1 single dynamic programming question, literally nothing else. What does this have to do at all with the job at hand?? The job is to configure and deploy distributed systems! Sometimes I hate this industry. It really feels like there’s no connection to the reality of the role whatsoever anymore.",2019-06-13 08:16:25
My LinkedIn profile had a curse word in it,1077,as1je1,https://www.reddit.com/r/cscareerquestions/comments/as1je1/my_linkedin_profile_had_a_curse_word_in_it/,111,1550549901.0,"I'm just starting to reach out and see what other opportunities there are in my market, so I flipped the ""show recruiters you're interested"" switch on my LinkedIn account. I get about 4-5 messages in the next month and send out a reply to all of them. Tons of profile views, but only 2 responses. 

I just got off the phone with one of the two that responded to me. The conversation lasted about 20 minutes. She was energetic, very helpful about what my market is looking for and even scheduled another meeting over lunch.

Near the end of the phone call she pointed out that my 'message to recruiters' actually said ""fuck off"". I thought I misheard her, went into panic mode, opened the recruiter settings tab and see a plain white text box for the message to recruiters. About 6 lines down, just at the edge of the box, there it is ""fuck off"".

So moral of the story kids, don't leave your LinkedIn account open anywhere ever. This probably happened to me when using it at a college computer lab and I never noticed since.",2019-02-18 23:18:21
Capital One is a very annoying company,1080,9o3jw4,https://www.reddit.com/r/cscareerquestions/comments/9o3jw4/capital_one_is_a_very_annoying_company/,300,1539559660.0,"If there ever was a company to teach me that good money + modern tech is simply NOT the only things that matter in finding a job.

&#x200B;

Everyone here throws you under the bus because of the stupid stack ranking. Every engineer is trying to 'win' ahead of you to get a promotion. The VP's are master manipulators that talk about the same old ""harvesting company culture"" bs.

&#x200B;

Maybe I'm just ranting. I learned a lot from them but I can't wait to move.",2018-10-14 19:27:40
"I don't want to be a rockstar coder. When 5PM hits, I want to go home, and not think of a single line of code. Is that too much to ask for?",1071,4xashc,https://www.reddit.com/r/cscareerquestions/comments/4xashc/i_dont_want_to_be_a_rockstar_coder_when_5pm_hits/,301,1470990345.0,"I'm fairly early into my career (3-5 years) and already feeling jaded.  None of the companies I have been at so far, as a software developer have been a good fit.

I'm sick of companies claiming they do ""agile"" when they really dont.

I'm sick of deadline driven projects, where the deadline is created by people up top without consulting with the developers, assuming we'll just do whatever it takes.

I'm sick of things being broken in to sprints, but with stupid rules where everything needs to be finished by the end of it.  No concept of moving things to future sprints. Everyone ends up scrambling and that's how overtime is created.

Speaking of overtime, I'm sick of lackluster development practices that cause overtime in the first place.

I'm sick of companies that are too cheap to build out proper teams.  No, I don't feel like developers should do the job of a proper QA team.  And if you can't invest the money to create automated testing, wtf are you doing?

I'm sick of stupid office politics.  Tired of company events being created under the guise of being optional, but if say you won't be coming, you are threatened into going  ""You better think long and hard about your decision not to go....""

I'm tired of having to take my laptop home and essentially being constantly available.  Tired of getting an email and being expected to answer it after hours.

I don't love this stuff.  I do it because I think I'm decent at it, and it pays well.  I have other hobbies.  Unfortunately since I started working full time, my energy to do those hobbies has somehow diminished.

I don't care to be a rockstar programmer.  I don't want to code on my free time.  I don't want to work overtime without getting paid for it.  I don't want to deal with office politics.  I don't want to pretend I care anymore...

Part of me is nostalgic for the years where I did tech support/bug fixing.  At least I knew I would go in, do roughly the sames tuff every day, and when I left for the day, that was it.  No overtime, I was left alone.

Where the hell are the companies that understand this, and what questions have to be asked to find them?

Or do they not exist?",2016-08-12 04:25:45
"This ""startup"" asked me to do a project for an unpaid internship before any kind of phone screen...",1065,78rhz7,https://www.reddit.com/r/cscareerquestions/comments/78rhz7/this_startup_asked_me_to_do_a_project_for_an/,347,1509001364.0,"This was the email I received after applying (side note, this company's whole platform is centered around photo based marketing):

  
""Hi _______ Thank you for applying for the Back End Software Development Intern position. Before we we get you in for an interview, you will need to pass this development test:
Project Guideline: Here at **Bee** we are content heavy, so this project is designed to test how well you can manage content. Here, the front-end would like to send a JSON encoded API request to your server in order to upload a photo to the site. It is on you to create an endpoint that can handle this upload, then find a way to view all the photos that have been uploaded to the site in an efficient manner.
&nbsp;


Requirements: -Django or Node.js Framework -Photo upload endpoint -View photo endpoint -View photo feed endpoint -Authentication system that only allows authenticated users to upload photos but all users to view photos -Automated testing -Code coverage does not need to be complete, just generate that some critical functions of the system have tests attached to them. -Write-up on the systems design pattern choices
This should explain framework decisions, where the system works scales well, and where the system could improve. This should be a quick project, so it is expected to be functional but not flawless.""  
&nbsp;

**I replied, asking if it was a paid position and the deadline for the project. They replied with the following:**
""Happy to clarify. This position is paid after a 3 month training. This is non-negotiable and keeps us from hiring engineers that end up being toxic to our long term goals and just looking for a pay day. As for the project, you will have one week from today.
We wish you the best of luck and hope to have you on our team within the month!""

&nbsp;

Then I responded, concerned that they were asking me to do free work for them. Mind you, I am very aware of companies asking you to do a project or test before hand...but this was different.


&nbsp;

They responded with the following:
""You are mistaken, but I am sorry you feel that way. As I said above, you will not be paid during the 3 month training session. You would not be doing any work for the **Bee** platform during that time, but instead would be instructed and on-boarded by two of the leading engineers in their field. These 90 days are specifically designated to bring people like you up to speed on our very complex tech stack. We are not only in compliance with California guidelines, but have gone above and beyond to make sure our future employees are not only qualified to work for *Bee* but could work anywhere in the world after their first 90 days.
Let me know if you have any further concerns and we will withdraw you from the applicant pool immediately.""


**Their ""CTO"" was previously a SWE intern at Amazon...I take it that means you are a leading engineer?**

**EDIT** Here is the company: https://www.crunchbase.com/organization/bee-technologies-inc

**Resulting TechCrunch article: https://techcrunch.com/2017/10/30/small-startup-shows-us-the-wrong-way-to-incentivize-programmers/**",2017-10-26 03:02:44
A lot of toxic traits surfaced in me when applying to jobs. Here’s how to avoid my mistakes.,1068,cgtrfq,https://www.reddit.com/r/cscareerquestions/comments/cgtrfq/a_lot_of_toxic_traits_surfaced_in_me_when/,119,1563923149.0,"# Background

I began my software engineering job search in August 2018: the summer before my senior year of college. I applied for 8 months (with some month breaks in between).

The stress and anxiety of applying to jobs surfaced some toxic traits in me. I like to say surfaced because I believe these traits have been in me, such as certain kinds of shame. For example, low self esteem can usually be hidden behind walls. When it gets to an extreme such as direct rejection, or the mindless filling of boxes, it can surface more easily.

I found I projected a lot of emotions on the people around me. [Here's a picture I drew](https://imgur.com/gallery/L4N3UVU) to show how this works. Credits to the therapist in a book called ""The Truth"" by Neil Strauss.

Essentially my ego tries to protect this shame by projecting out irrational thoughts, anger, and sadness onto the people around me.

I want other people to avoid my mistakes. So  here’s my advice.

# Advice

These tips are a part of a lengthier video [here](https://www.youtube.com/watch?v=9uwBkGu3m4Q). The tips listed below are all the same as the video, except the video gives a little more detail. Plus it's in a nice video format if you prefer :)

## 1. Stop comparing yourself to other people  
Everyone's at a different stage. Reading the ""Homeless to Google Employee"" story will not benefit you in any way. Don't read it.  
Get off social media. The last thing you want to do after applying to jobs is see everyone in their ""picture perfect"" life.  
 
## 2. Don't multitask  
Don't try to manage relationships and apply to jobs at the same time. You'll most likely project your emotions onto other people. Lock yourself away in your room or a coffee shop. When you're done applying to jobs THEN be with family and friends, and try to be as present as possible. Leave work at work.  
 
## 3. Self affirmation and mindfulness  
A lot of toxic traits can surface during this time. Be aware of them. Don't let shame (or whatever else arises) take control of you and hurt the people around you.  

Some good apps are [Headspace](https://www.headspace.com/) and [Jour](https://itunes.apple.com/us/app/jour-guided-journaling/id1439590239).  
 
## 4. Assure close ones that this will be temporary  
You may act differently under all this stress and anxiety. Let close ones know this if they feel affected.  
 
## 5. See the big picture  
See close ones as helpful to your emotional well-being, rather than hindering your career.  

Your career is not the only important aspect in your life. You have friends, family, a significant other, pets, etc... In the job search, you can always do more. Learn one more thing, apply to one more job. It's endless. You have to set your own boundaries and not forget about the people who got you where you are.  
 
## 6. Have a non-tech hobby  
Sadly most entertainment these days are via a screen. For people who work with computers all day as a job, this can be difficult. Give your eyes (and brain) some rest with a non-tech hobby. Something expressive like learning an instrument, dancing, or singing are all good.  
 
## 7. Don't put your health in the passenger seat  
Time flies during job search. It can feel difficult to get in 3 healthy meals. Set yourself up in an environment to support good eating. If it takes an hour to make a meal, make a lot to save for the next day. I also drank a shake as a meal replacement for an additional mid day meal.
Additionally don’t stay up late to apply to 10 more jobs. It’s not worth it. For all the reasons said in this thread already.
 
## 8. Therapy  
A lot of irrational thoughts can arise under such stress and anxiety. Flesh them out with an unbiased person. You'll probably learn a lot about yourself :)  
 

You're going to be okay. This is temporary. In 5-10 years this part of your life will all make sense. It may not pan out exactly how you want, but it's going to pan out into an interesting story. Best of luck!

### Edit
Thanks for the gold stranger. Even more importantly, this thread turned into more than I could have imagined. The discussion so far has been great. Happy to see we can all be vulnerable here.

[tweet storm edition](https://twitter.com/bradmitchell_/status/1154402596041482241?s=21)",2019-07-23 19:05:49
"After a sub 3.0 GPA, no internships, switching majors Junior year, and searching for over two years I finally received my first offer",1064,729exv,https://www.reddit.com/r/cscareerquestions/comments/729exv/after_a_sub_30_gpa_no_internships_switching/,116,1506332651.0,"Hey everyone, I wanted to make a throwaway to just thank everybody for all of the help you have given me directly and indirectly. I found this subreddit about three years ago and I thought I would just use it once or twice for help getting an internship. Instead I have visited nearly every single day, posted my resume at least twenty five times and asked dozens of questions ranging from interview prep to company reputations. I have also collected dozens of super helpful links that are still on my bookmark bar, like [this excel sheet](https://docs.google.com/spreadsheets/d/1z3_OfZdPXiOOgHi7uY5nvLuQX_qbpaxmYNXHHiuuV0I/edit#gid=0), [intern.supply](http://www.intern.supply/), and this [massive cheat sheet](https://www.reddit.com/r/learnprogramming/comments/5gr8nw/heres_a_sanitized_list_of_530_free_online/).


I was never able to obtain an internship before graduating despite hundreds of applications and a handful of interviews but the preparation I did for these helped me later on for full-time interviews. It was really hard seeing everyone else obtain their 3rd or 4th internship and receive full-time offers several months before graduating while I was stuck doing manual labor over the summers for minimum wage. I suffered severe depression from the beginning of my Sophomore year until about a month ago and my sliding grades and poor interview performances were a few symptoms of that. I kept checking out my classmates on LinkedIn and the salary sharing threads here and kept feeling sorry for myself until I realized I just needed to keep improving instead of worrying about what other people thought of me. I felt so monumentally insecure going into interviews because I felt like I was always the weakest candidate because of my lack of experience.

I also kept a folder on my email titled ""rejections"" because I was just getting so fucking many. I kept adding and adding to it because I wanted to look back on the day when I would get my first offer and see all of the hard work I've done. I do not recommend this.


Eventually after many hours of interview practice, dozens of hackerrank questions, reading CTCI front-to-back, a significant personal project and a one and a half month post-graduation internship I finally have my first offer. I didn't make this because I want to brag or anything, I just want to thank the contributors for all of their generous help and to provide some reassurance to those still struggling. If you work hard enough you will eventually succeed. Just keep at it.

Thank you all so very much, I would not be in this position without you.
",2017-09-25 05:44:11
"How the fuck do you full-time students/workers have time for ""side projects""?",1062,acwlm8,https://www.reddit.com/r/cscareerquestions/comments/acwlm8/how_the_fuck_do_you_fulltime_studentsworkers_have/,319,1546741078.0,"I can barely keep up with my coursework, I just don't get how some of you people can just churn out these side projects. I've seen some crazy githubs out there. Am I just unmotivated?",2019-01-05 21:17:58
100 pieces of advice I wish I had been given when starting my career as a software developer 20 years ago,1061,bu84u7,https://www.reddit.com/r/cscareerquestions/comments/bu84u7/100_pieces_of_advice_i_wish_i_had_been_given_when/,443,1559120069.0,"I found this subreddit a few months back because people were linking to my work on ""[How to Deal with Difficult People on Software Projects](https://people.neilon.software/)"" in comments, and I saw the inbound link traffic in my server logs. When I first discovered cscareerquestions, I spent about three days answering questions before I gave up because there were too many questions to respond to, and I was starting to sacrifice quality for quantity.

&#x200B;

I made a mental note to return to this sub and try to do something to answer as many potential questions as I could. Now that I've finished [my follow-on project to How-to-Deal](https://neilonsoftware.com/2019/05/22/giving-software-developer-career-advice-to-bailey-the-beargrammer/), I had some free time to work on the following list that attempts to consolidate all the advice I would have liked to have given to the hundreds of career questions that are being asked here every day:

&#x200B;

1. **Make smart life choices** – You don't want to wake up one day as an old person full of regrets. If you have a chance to do something bold, daring, unexpected, and scary do it if you think not doing it will weigh on you for the rest of your life.
2. **Teach yourself to teach yourself** – All formal education does it get you to the starting line of your career. To win the race, you have to upgrade your knowledge and skills continually. To do that, you need to be continually learning new things; and to do that, you need to learn how to learn anything you want to learn.
3. **Find a software architecture mentor** – Learning to code is easy. Software architecture is a difficult skill to develop and having an experienced architect to mentor you will help immensely. Just make sure the architect is an actual architect and not just someone with an architect title.
4. **Find a business mentor** – Software developers generally are miserable at understanding what makes a business work. You can read all the books in the world, but having someone non-technical with a lot of business experience help guide your career will not only help you avoid a bunch of easily-avoidable pitfalls, but will most likely make sure you end up making a lot more money that you would have otherwise.
5. **Keep the salespeople happy** – If the product you are working on has a sales team, then make sure those salespeople are always happy with you. Salespeople are paid to talk and if they like you, they will talk to everyone about how much they like you; if they don't like you, they will make sure everyone knows how much they don't like you.
6. **Study, learn, and master communication** – The most valuable skill in your career is communication, your ability to code comes second. If you don't know how to listen and understand other people, as well as how to get other people to listen to you, your career is going to be stuck in neutral.
7. **Learn to negotiate** – Whether is negotiating deadlines, requirements, or compensation; your skills at negotiation will be invaluable for your entire career.
8. **Don't leave money on the table** – When negotiating a job offer, make sure that you get the maximum budget they allocated for that position. You never want them to celebrate hiring you with, ""Wow, we got them cheap!""
9. **Develop a good handshake** – Developing a good handshake takes practice but can be learned quickly. Once you meet someone with a good handshake, take that opportunity right there and then, and ask them to teach you that handshake. Your handshake is one of the first impressions people have of you, and if it's a dead fish they will assume you lack confidence.
10. **Look people in the eye** – When you are talking to someone, or they are talking to you, make eye contact. Most communication is non-verbal, and you don't want to be looking somewhere else when they communicate something important non-verbally.
11. **Speak assertively** – Be open, honest, direct and respectful in all of your communication; if you are, you can say anything to anyone.
12. **Avoid offending people if possible** – If it is possible to say what you need to say effectively without offending someone, avoid offending them. If you can't say what you need to say without offending, at least try to limit the degree of offense by being polite.
13. **Never get upset or frustrated** – There is just never a good reason to let a job upset or frustrate you. It's just a job, and if you don't like it you can leave whenever you want.
14. **Leave work at work** – When you leave work, switch to focusing on your personal life. Jobs are temporary, your personal life is forever.
15. **Learn to influence other people** – If you have to choose between authority and influence, go for influence. Influence is primarily exerted by being someone people respect, and then persuading them to do what you need them to do.
16. **Plant many seeds** – Don't go all-in with any one initiative. Start a bunch of initiatives because some of them will fail and you want at least some to succeed.
17. **Don't pay attention to titles** – Titles are meaningless unless they bring you more money. Other people's titles may be deserved or not, so just judge them as individuals and not by their title.
18. **Read the seminal books on software design** – Stack Overflow can't teach you software design. The best way to understand software design is by reading the best books written on the topic by people who know what they're talking about. There are many, many recommended reading lists for software developers, so find one you think you can manage and get started. Since no software developer read these types of books anymore, you will be at a considerable knowledge advantage over your peers.
19. **Listen to audiobooks constantly** – When you have a chance to listen to an audiobook do so. That can be in the shower, while running errands, doing chores, on your commute, or as you're falling asleep.
20. **Learn cybersecurity** – Cybersecurity is an aspect of software development that is never going away, and it's getting more complicated to learn day-by-day. Make sure you do everything you can to learn as much as you can so that you are not the cause of the world's next critical security breach.
21. **Learn performance tuning** – You will most likely need to performance tune the software you write at some point, so you may as well learn how to do it. Performance tuning is a broad and complex topic and is often specific to a particular application. Just remember not to performance tune an application without measuring the current total performance, and the total performance after tuning, otherwise you may be tuning something that doesn't have that big an impact.
22. **Dive deep into Databases** – Databases are not going anywhere, so learn SQL back-to-front, and up-and-down; then learn how to write proper schema's; then learn how to write high-performance queries. SQL is so easy to learn that people think they have ""learned databases"" after they've written a few select statements. Databases have a lot of depth and are often an essential part of any application you are writing.
23. **Learn multiple programming languages** – Not only learn multiple programming languages but learn programming languages that are very different from one another. Java, Python, JavaScript, Haskell, and Swift are good candidates because of how different they all are from one another. The more different the languages you learn, the more approaches you will have in tackling problems – no matter what language you are tackling that problem with.
24. **Master your language runtime** – If you're going to be working with a programming language for years, dig below the surface and figure out how the language's runtime works beneath the surface. Not only will you learn more about the language itself, but it will be invaluable as you learn how to performance tune your applications.
25. **Mitigate your haters** – There will always be people who don't want you to succeed, especially the more success you experience. If you can't convince your haters not to be haters, then figure out a way to neutralize all the harmful bile they'll be spewing in your direction.
26. **Learn to focus** – You need to focus to code. If you're addicted to your phone take it as seriously as a substance abuse problem and get your habit under control. Once you have, you can learn how to enter into the flow state, which is a critical skill for a software developer.
27. **Get off of social media** – Social media is only suitable for virtue signaling and making other people feel inadequate. If you think your friends will miss you, stop using for a week and see who notices. Invite the people who notice out to dinner and learn how to communicate in-person rather than through a tiny screen.
28. **Stop playing video games** – you're an adult. Act like one. Video games take irreplaceable hours of your life and flushes them down the toilet giving you nothing in return. If you want to be a professional eSports competitor, then go all-in on that life. If willing eSports tournaments is that not your passion, then put down the controller and focus on things that matter in life.
29. **Be disciplined** – Discipline is doing what has to be done when it has to be done whether you want to or not. Discipline will be required to accomplish anything worth accomplishing. Suck it up and get it done.
30. **Always be polite and professional** – There is never a reason to be rude and unprofessional. Even if someone is being disrespectful to your face, you don't have to stoop to their level. If you're not sure how to burn someone while being polite and professional watch any British comedy.
31. **Never be intimidated by anyone** – Unless someone has the ability to inflict physical harm or take away your freedom, there is no reason to be intimidated by them. People in corporations will develop massive egos based on their own misconception that people can be intimidated by them, but don't feed into their fantasy.
32. **Stand up for yourself** – Never go looking for trouble, but when trouble comes your way don't back down. Backing down from a coworker or manager who is a bully will haunt you for the rest of your life. Even if you suffer the consequences for not backing down, at least you will be able to look at yourself in the mirror and live the rest of your life with no regrets.
33. **Have courage** – Courage is acting despite your fear, not the ability to feel no fear. There will be plenty of times when you will be afraid to do something, but don't let that fear rule you.
34. **Protect your reputation at all costs** – Your reputation follows you everywhere you go. A good reputation is very difficult to build, and very easy to destroy. If something or someone is threatening your status, you have to act no matter the costs.
35. **Own your strengths and weaknesses** – You cannot and will not be good at everything. You also cannot and will not be bad at everything. There will be things you are good at, and things you are not good at. That's life. The key is to be aware of the things you are good at and play to those strengths while minimizing any negative impacts of your weaknesses.
36. **Be conscious of your own biases** – We all have biases, but none of us spend the time necessary to understand them much less mitigate them. Do your best to understand the biases you have, and try to act in a conscious, deliberate manner rather than just doing what feels natural. If your biases are inappropriate for the workplace, acting naturally is the last thing you should do.
37. **Be aware of Dunning-Kruger** – You don't know what you don't know. None of us do. When you think you know something, question that assumption and try to find a way to verify that you know it. Chances are, what you think you know well you are still only a novice at.
38. **Don't worry about getting fired** – Getting fired is not the worst thing that can happen to you, and depending on the situation might be just what you need to point your life in the right direction.
39. **Don't ""suicide by cop""** – If you want to quit your job, then quit. Don't be a bad kid and hope that your manager eventually gets fed up and fires you because you lack the courage to quit yourself.
40. **Recover quickly from failure** – The more risks you take, the more you are going to fail. If you take no risks you won't accomplish anything worth accomplishing. Therefore, if you want to accomplish something worth accomplishing, you have to take risks and are going to fail. The key to failure is to learn from that failure and move on as quickly as possible.
41. **Be ambitious** – If are stuck in a job, you might as well be the person running the show. The alternative is to be happy with your position on the org chart and watch your peers get promoted around you. Having to congratulate people for a promotion they probably didn't deserve gets old quick, so you might as well work to get promoted so that someone you trust will be in charge – you.
42. **Don't be happy with your ""good job""** \- Almost no job is good, that's why there are people who sacrifice everything to form their own company and be their own boss. Your goal is to have a good life - your job is only there to support that goal. If you job doesn't support that goal, it's not a ""good job.""
43. **Present yourself as you want to be perceived** – If you want people to perceive as an immature slob, keep dressing like you're a freshman in college. If you want to be perceived as a powerful force to be reckoned with, dress accordingly. A tailored outfit and an expensive pair of shoes not only conveys seriousness but it makes you feel like a superhero.
44. **Put a filter between your brain and your mouth** – Master the skill of not saying what you think or feel as early in your career as possible. No one wants to hear your unvarnished truth about anything. Just because something pops into your brain to say, it doesn't mean it's a good idea to say it the way it popped into your brain. Learn how to phrase what you're thinking in a way that palatable to the audience you're speaking to.
45. **Learn to talk to executives** – Relationships with executives can make or break your career. The key thing an executive doesn't have is time, so if you can't convey a point in 10 seconds or less, refine and condense what you have to say until you can. Nothing frustrates an executive more than being cornered by an employee with nothing of substance to say.
46. **Read the company handbook** – Every company has a ""handbook"", even if that's not what they call it. Whatever it's called, your company has guidelines for behavior that they expect their employees to adhere to and you need to fully understand your company's expectations of you.
47. **Resign from death-march projects** – When you see that your project is going to fail, leave as soon as you notice. You may feel like if you stay you can save the project, but it's very rare that a single person can make-or-break a project. When you are in a no-win situation there's no honor in going down with the ship.
48. **Be your own cheerleader** – You will rarely if ever get authentic complements on your performance. In order to keep yourself positive and motivated, you need to celebrate your own accomplishments independent of the company you work for.
49. **Develop a support circle** – Occasionally life is going to kick you in the teeth so hard that you are going to need help getting up again. Your support circle are the people who will be there for you even when it's inconvenient for them. ""Fairweather friends"" are not your friends, they're just people who want company so they don't have to eat alone.
50. **Don't confuse confidence with arrogance** – It can be very difficult to tell the difference between confidence and arrogance in someone you just met. The key difference is that confident people believe they can do whatever they set their mind to, and arrogant people are just trying to get people to respect them without working to earn their respect.
51. **Change processes that don't work** – If you are using a process that is not working, change what's not working. Don't listen to people's excuses of what can't be changed, just start doing things differently and dare people to stop you.
52. **Do at least one startup** – Startups give you experience in how to go from nothing to a shippable product. Considering a software developer's job is to create shippable products, getting that end-to-end knowledge will be invaluable throughout your career.
53. **Do at least one enterprise** – Enterprises give you experience in how big-business runs. Even if your heart is in startups, understanding corporate bureaucracies, hierarchies, politics, and inefficiencies will help you anticipate their moves when you eventually have to sell to them or compete with them.
54. **Learn to manage your manager** – Your manager is just a person like you. They might have a few more years of experience, but sometimes they don't. ""Managing up"" is you giving your manager advice and guidance that optimally is in everyone's best interest.
55. **Learn to code fast** – Your ability to code fast will always come in handy. Being able to code fast doesn't mean you always have to; it just means that if you need to get something built in a hurry you can. Coding fast has almost no drawbacks unless you forget to pump the breaks when you're making your coworkers look bad.
56. **Don't chase certifications** – If you know you can't get a job without a certification then, by all means, get it. Otherwise, don't assume that just because you got a certification in something, that a company will find you more desirable. They may, or they may not.
57. **Don't work with your friends** – It may seem like a good idea to work with your friends it never works out. Eventually, someone gets promoted and the others are jealous, or someone doesn't pull their weight and expects their friends to cover for them; or other people start to resent you being a part of a clique they're not a part of. If your coworkers become your friends eventually then fine but don't actively seek out working with your friends.
58. **Do not define yourself by a technology stack** – You are not your technology stack. You will change which technologies you work with several times throughout your career, so don't paint yourself into a corner by going all-in on some technology that you just so happen to be using today.
59. **Don't obsess about trends** – Trends come and go and are most often are overhyped by the media. Just because everyone says something is the next big thing doesn't mean it is. Develop yourself as an intelligent skeptic that doesn't their own investigation before following the crowd. You have to stay on top of the trends of the industry to make sure you don't miss something important, but don't let trends dictate the course of your career.
60. **Always get plenty of sleep** – Sleep is critical for both your mental health as well as your performance as a software developer. There is never a good reason to not get enough sleep, as not getting enough sleep will eventually catch up with you in non-obvious ways.
61. **Avoid socializing with your coworkers** – Your coworkers are not your friends. Your friends are your friends because of some personal bond you share. Your coworkers are people who get a paycheck from the same place that you do. The more you socialize with your coworkers the harder it will be for them to take you seriously, and as a professional, you need your coworkers to take you seriously to be effective at your line of work.
62. **Understand the difference between friends and coworkers** – The people you work with are not your friends, they only work at the same place that you do. If you wouldn't bother to keep in touch with them after you left to go work somewhere else, they are your coworker. If you would miss them and want to stay in touch with them if you left - and they feel the same - then a coworker relationship has the potential to turn into a friendship.
63. **Don't be naïve** – The world is messed up and jobs are no different. There are good people with good intentions, and there are bad people with bad intentions. Don't assume everyone around you has good intentions. Be skeptical of people's motivations, and trust your instinct when something feels off.
64. **Learn who to trust** – Just because you think you can trust someone with sensitive information doesn't mean you can. A good rule is to simply never share sensitive information unless you absolutely have to and only with people your company authorizes you to share it with. People love to talk about what they know that other people don't, and people can violate your trust accidentally such as when they hesitate in answering a direct question.
65. **Keep your enemies close** – This old adage is popular for a reason. When someone is clearly out to get you, befriend them and get to know them. If that turns into a genuine friendship, perfect. If it doesn't, at least you can glean why they're your enemy and adapt accordingly.
66. **Keep physically healthy** – The job of a software developer is sedentary unless you have a treadmill desk. You have to find the time to move your body and keep it healthy, or else you will end up uncomfortable in your own skin and in-and-out of the doctor's office due to living your life in front of a keyboard.
67. **Invest in a good chair** – You back and neck will give you trouble your entire career unless you learn how to hold your body while you code. Since most of us code in a chair, make sure it's an ergonomic chair that holds your body in the correct posture to avoid long-term physical maladaptations. You don't want to have a hunchback as you age.
68. **Protect your wrists** – Carpal tunnel syndrome is a real thing. Get the right keyboard and mouse, and learn how to use them in a way that doesn't permanently damage the way you make a living: typing.
69. **Protect your mental health** – Ignoring problems at work, working overtime, not dealing with problems as they occur are all a recipe for needing a lot of therapy later in your career. Deal with problems as they come, and refuse to accept any give of stress people try to give you.
70. **Keep your living expenses low** – Software developers make a lot of money compared to other professions, so you might think you're rich. You're not – you're just making a high salary. Wealth is time + freedom, and the measure of your time you have to enjoy your freedom. If you live above your true means, the things you own will eventually own you.
71. **Have a saving account with six months of salary** – Living check-to-check is insane when you start making decent money. Stash money away in savings such that if you suddenly need to find a new job, you don't have to stress about how to pay your rent or mortgage.
72. **Build your network of contacts** – When it comes to finding jobs, it's often who you know more than what you know. That's an immutable law of life. Level the playing field by making sure that in addition to knowing how to do the job, you also get introductions that are at least as good as other people leveraging their network.
73. **Speak at conferences** – Tech conferences are always looking for speakers who can present on the latest technology. Spend a weekend getting familiar with the hottest trendy technology and submit an abstract to a bunch of conferences when they put out their call for papers. Don't worry about being an expert in technology – almost no one speaking at a conference is.
74. **Recruiters are not your friends** – Recruiters tend to be friendly when they think they can make money from you but are only there to facilitate a transaction where you are the commodity being traded. Keep the relationship professional and business-like. Everyone should complete the transaction feeling good about the deal: you, your new company, and the recruiter.
75. **Have principals and stick to them** – Wherever you get your principals from your family; your religion; your ethics; your morals; your opinion; make sure you have them and don't violate them under any circumstances even if it costs you an opportunity.
76. **Live an intentional life** – Don't let other people dictate the course of your life because they don't know the life you want to live. Only you know what an intentional life is for you. You don't want to look back on your life and realize you are stuck in a life-plan you hate because someone else gave you that plan and you didn't question it.
77. **Trust your gut when considering an offer** – An offer may have all the cash, vacation, and perks you are looking for, but if something seems a bit off, and your instinct is not to take the job, don't take the job. Your brain is good at analyzing complex situations but bad at articulating them. Often, the collection of non-verbal communication and situational inconsistencies only show up as you have a bad feeling about the job. Trust your feelings.
78. **Help people who want your help** – If someone asks you if you have time to help them, always say ""yes"" and then figure out where the extra time will come from later. They will become your fan for life.
79. **Don't help people who don't want your help** – If someone needs your help, but doesn't want your help, leave them alone. No come comes from offering help to someone who doesn't want it.
80. **Stand up for people who can't stand up for themselves** – You will run into a lot of people in your career who for whatever reason are getting screwed over
81. **Be a team player** – Don't just give lip service to being a team player: put the needs and concerns of the team ahead of the team. Step up when something difficult needs to be done, back-up your teammates when they need your support, and if you have to drag the entire team kicking and screaming across the finish line so you can all win.
82. **Figure out what ""success"" and ""failure"" means at your company** – Every company is different and defines a successful or a failed software project slightly differently. Things are rarely as simple as they are presented in meetings, so ask questions to figure out what rewards or consequences await you for success or failure.
83. **Figure out what the mission is** – Managers are particularly bad and explaining the overarching vision that you are a part of, often because they don't know. Do your best to figure this out, because the mission is always broader than adding a feature of building a new app.
84. **Commit to the company's mission** – If you are receiving a paycheck, then commit to whatever mission you are a part of. This isn't about corporate loyalty, but about professionalism. If you don't want to commit to the mission, find another company with a mission you are willing to commit to.
85. **Never, ever gossip at work** – There is never a reason to start gossip or listen to gossip. If someone tries to gossip with you, politely decline to engage. People will respect you for your integrity.
86. **Don't get drunk with coworkers** – Grabbing a drink with your coworkers if often unavoidable, but never ever get drunk. Absolutely no good whatsoever can come of you slurring your words and stumbling around drunk with people you expect to have a professional relationship with the next day.
87. **Embrace capitalism** – If you are receiving a paycheck from a company in exchange for your labor, then you are part of a capitalistic system. It's easy to be a replaceable cog in a big machine if you don't understand that you are in a big machine. Learn the rules of capitalism, and position your career so that you're the person in charge making the most money, and not the person working overtime for hardly any money.
88. **Avoid brainstorming sessions** – Brainstorming is a social activity masquerading as an intellectual activity. There are going to be times when you need to work with people to solve tough problems, but you won't solve them by doing the corporate equivalent of a party game. Tough problems need to be defined and rigorously analyzed; practical solutions need to be proposed and either accepted or rejected based on real-world constraints. Brainstorming is just people pretending they care about solving a problem when in reality they usually don't.
89. **Be patient** – Often times to win big you have to hold your position rather than take an action. Sometimes that big initiative that will make your career is rejected but might be accepted if you pitch it again in the next fiscal year. Stalk your game and strike when the time is right. Don't get frustrated and miss an opportunity coming your way.
90. **Learn to make diagrams** – Anything that can be expressed in a document can be more clearly expressed in a diagram. Even a crude diagram can be useful if it simplifies a complex topic. You don't have to be an artist to create a diagram, just try to convey as much useful information in as simple a diagram as you can. With diagrams remember less is more.
91. **Treat your testers well** – The people who test your software can make your life a living hell, or they can make it a breeze. If you work to keep them happy, they'll usually return the favor. Remember, people who test software are your most valuable allies, as they guard against your inadvertent mistakes negatively impacting your reputation.
92. **Pay attention to the little details** – Being a software developer means you pay attention to the little details other people haven't even thought about. You have to think about the problems you are solving far more deeply than the people who are telling you what to build, so always go the extra mile and make sure you don't miss anything at all when you deliver your feature.
93. **Learn to compromise** – Sometimes to get what you need you have to give a little to the other party. If you are having trouble building consensus, then try to identify smart compromises and offer them to the people with objections.
94. **Treat people well** – You can tell the character of a person by how they treat people they don't have to treat well. Whether it's the CEO or the person emptying your trash, treat everyone with respect and dignity.
95. **Respect expert opinions** – Experts are a dying breed, but if you find one, learn to trust what they have to say. The difference between success and failure can sometimes be paying attention to what an expert says. To reap that benefit, however, you first have to acknowledge that experts exist and that their opinion is more useful than the opinions of non-experts.
96. **Be a Mentor** – Once you have a few years of experience under your belt, try taking someone under your wing to show them the ropes. You don't have to be a master of your craft to be immensely helpful to someone who is just starting out.
97. **Don't be afraid of taking small steps** – Often to accomplish something difficult you have to take things is small steps. People like to take big steps as it makes them feel more powerful, but Rome wasn't built in a day. Find the small steps that get you closer to your goal and follow them consistently until your goal is achieved.
98. **Reserve time for thinking** – Producing software requires you think of a solution, and then you type that solution into a computer in a particular programming language. Anyone can type something into a computer, the difficulty is in thinking up what to type. Before you start coding, always set aside some time to think of what you're going to write before you write it.
99. **Be open to other people's opinion** – There are going to lots of people you don't agree with, but that doesn't mean you should ignore their opinion. Sometimes, even a bad idea can be helpful if it helps you more clearly articulate what makes an idea bad. Remember, however, that being open to the opinion of others doesn't necessarily mean you should do what they are suggesting.
100. **Stop feeling like an imposter** – We're all imposters. The software developers at the NSA looking for global cybersecurity threats are imposters compared to the software developers who write code that pilots rovers on mars who are imposters compared to software developers who write missile interception software on battleships who are imposters compared to the software developers at the NSA. Everyone's an imposter compared to someone. Focus on your specialty rather than worrying about what other people are doing.

&#x200B;

I hope people find this list useful. Let me know in the comments if you think I missed anything.  


\---  
UPDATE:  


Many comments followed a common threads of criticism, and while I tried to answer everyone's comment individually, I felt I needed to [address the more controversial](https://neilonsoftware.com/my-responses-to-comments-on-the-reddit-post-100-pieces-of-advice-i-wish-i-had-been-given-when-starting-my-career-as-a-software-developer-20-years-ago/)[ topics in podcast form](https://neilonsoftware.com/my-responses-to-comments-on-the-reddit-post-100-pieces-of-advice-i-wish-i-had-been-given-when-starting-my-career-as-a-software-developer-20-years-ago/).",2019-05-29 04:54:29
(Bad) advice in this sub,1049,bzrwsk,https://www.reddit.com/r/cscareerquestions/comments/bzrwsk/bad_advice_in_this_sub/,343,1560378531.0,"I noticed that this sub is chock-full of juniors engineers (or wannabes) offering (bad) advice, pretending they have 10 years of career in the software industry.

&#x200B;

At the minor setback at work, the general advice is: ""Just quit and go to work somewhere else."" That is far from reality, and it should be your last resource, besides getting a new job is not that easy at least for juniors.

&#x200B;

Please, take the advice given in this sub carefully, most people volunteering opinions here don't even work in the industry yet.

&#x200B;

Sorry for the rant.",2019-06-12 18:28:51
[OFFICIAL] New Rule: College-specific questions now go to /r/csmajors,1048,8hzdvk,https://www.reddit.com/r/cscareerquestions/comments/8hzdvk/official_new_rule_collegespecific_questions_now/,114,1525835355.0,"Hello to all! This is an OFFICIAL MOD ANNOUNCEMENT, please hold your undoubtedly worshipful praise until you have read the announcement in full.

A persistent issue in this sub has been questions that are much more about CS schooling than they are about jobs, such as ""Help, I only got into Stanford, CMU, Berkeley, and MIT, please help me decide between safety schools so my life isn't ruined!"" We the mods have been somewhat inconsistent about removing these threads, because they're not entirely irrelevant to this sub's focus, and because there wasn't a good subreddit to deflect them to.

...until *now*.

In partnership with the technically pre-existing sub of /r/csmajors and its previously lone moderator /u/ian421, we will begin deflecting to that sub all questions that are more about being a CS major -- or any other form of CS student, for that matter -- than they are about CS jobs. We have also partnered in sprucing up the sub a bit, so it should be easier on the eyes now. So if you want to ask about how to get started on being Big 4-Ready in middle school, or how in God's name anyone survives Operating Systems without swearing off computers, now there's a place for you to do so! Over there! And not over here! Please, God, *not over here*.

Similarly, /r/csmajors will be deflecting any career-specific questions it gets over to this sub. Questions that are in-between, such as about college career fairs, or internships, or ""How do working stiffs actually use the stuff they learned in CS classes?"", may go in either.

Lastly, the mod team of /r/csmajors, of which I am now half, will be recruiting a few new mods. More details on that will be announced later this week.",2018-05-08 23:09:15
I just landed the software engineering internship at Target! Has anyone had this internship?,1051,ahjkua,https://www.reddit.com/r/cscareerquestions/comments/ahjkua/i_just_landed_the_software_engineering_internship/,118,1547907486.0,I’m pretty excited for this internship. The campus seems to be pretty cool and Target seems to be making a good push toward technology. Does anyone have experience with Target that they could share?,2019-01-19 09:18:06
Please don't waste my time if you're going to ghost me after passing all test cases for a 90 minute coding challenge,1045,czdvt3,https://www.reddit.com/r/cscareerquestions/comments/czdvt3/please_dont_waste_my_time_if_youre_going_to_ghost/,208,1567588315.0,"Name and shame: IXL Learning

IXL sent a 90 minute coding challenge with a 3-day deadline. As someone who already regularly works 12+ hours a day, it was difficult finding time for it, but I made it work.

I had 30 minutes left on the clock when all test cases were passing, and I spent the rest of the time documenting code, writing more test cases, and ensuring my solutions were all optimal.

Almost two weeks went by without a reply, so I sent the recruiting coordinator - who I was in contact with previously - a followup. Almost immediately, I received an auto-generated rejection email.

I tried asking for any insights as to what led to the decision, but was left on read.

I get that some companies send coding challenges as an initial filter. It's easier than assigning engineers to a call. But 90 minutes is a *significant* amount of time - and that's not including the time spent preparing. For those who have full-time jobs and family to tend to at home, it's not a small ask. Especially if only 3 days are given to complete it. I'm perfectly fine with getting rejected for it, but a simple explanation as to why should be given to compensate for the time and opportunity costs.

TLDR:

* Avoid IXL
* Companies that demand a high time commitment and opportunity cost for the candidate should be held to the responsibility of explaining to those who passed the challenge why they were rejected
* If you still want to apply to IXL, I have all 4 of their challenge questions and can DM them at your request",2019-09-04 05:11:55
When should I start applying again?,1014,a3t9p3,https://www.reddit.com/r/cscareerquestions/comments/a3t9p3/when_should_i_start_applying_again/,114,1544164732.0,"Recently started a new job. Thought it was going reasonably well until I came into work today and found this http://imgur.com/BAXrglo

Not sure things are working, when do I need to start applying again? 


Edit: I’m getting a lot of really good advice! I want to thank everyone for the support. This is a really tough time for me.

After reading some of the suggestions, I’m now wondering if I should move this thread over to r/legalAdvice. Sounds like this could be a bigger deal that I first thought!",2018-12-07 01:38:52
How to reject (junior) applicants,1009,8g0iip,https://www.reddit.com/r/cscareerquestions/comments/8g0iip/how_to_reject_junior_applicants/,81,1525132723.0,"I'm graduating in a few weeks and my job I had lined up may not work out. I applied to this company recently and they sent me this response. It's the most kind rejection letter I've ever received. Just thought I'd share my excitement over being rejected.  Cheers.

>alreadyheard,  
>  
>I had a chance to review your application to the Software Engineer position at Foo. Unfortunately, I don't feel like the position would be a great fit for you at the moment.  
>  
>We unfortunately haven't found an effective way to on\-board junior folks remotely just yet. So right now we're looking for someone with at least a couple years of product experience under their belts. But based on what I can see of your work, it certainly looks like you've got the ingredients to become a talented engineer; I'd love to hear from you again in the coming years.
  
>  
>I wish you the best in your career search and hope that we can cross paths again in the future.  
>  
>Best,  
>  
>Bar",2018-04-30 19:58:43
Mild annoyances of being a female developer,1016,7kwwim,https://www.reddit.com/r/cscareerquestions/comments/7kwwim/mild_annoyances_of_being_a_female_developer/,615,1513752062.0,"Started a big project recently with lots of people and need to vent a bit. Feel free to share/vent if you have any annoyances. 

1. People just assuming you're a business analyst
2. Someone introduces the members of the development team and you have to awkwardly shout from the side that you're a member of it as well to get introduced
3. People automatically assume you're from the front-end team and ""better with colours""
4. Automatically getting more front end tasks than your male equivalents and having to call this out. 
5. Being involved in small email chains and providing correct information/solving the issue but someone just declares ""we need someone from the development team""
6. Having to awkwardly call out people for sending you emails calling you the other female developer many times in the email to you
7. People referring to my manager's team or talking about my manager like I don't know them/him. But that's my team!!
8. Having to listen to your manager correct the big boss which one of the female developers is which. 

My team itself is fine but everyone else in the company either doesn't think I exist or that I'm Mary/Julia/Sophie/that girl the business analyst/merged together estrogen Java unit with the other female developer??? It just doesn't seem to be getting better despite me being in the company for a while now. I have a simple name but everyone gets it wrong all the time. What's going on lol?


",2017-12-20 01:41:02
PSA: You are not going to have an inherently more satisfying career or life in general by working at one of the biggest tech companies in the world.,1010,5zd9oo,https://www.reddit.com/r/cscareerquestions/comments/5zd9oo/psa_you_are_not_going_to_have_an_inherently_more/,197,1489538912.0,"I'm 35 years old and have worked in this field for a while. I've interviewed with several of the ""Big 4/5"" companies, received offers at two of them, and worked for one of them.

I currently work at a smallish (~100 employees) ""fintech"" company.

The most exciting places I've worked at have been smaller, because you make more of a difference there. The most laid back place I worked was a big but low profile tech company - an S&P 500 company, but not a particularly recognizable name.

There are so many options out there in a variety of fields working on all different sorts of technology, that I don't understand why people are so dead-set on working at places like Google and Facebook.

The single biggest factor affecting my happiness at a given workplace has not been the recognizability of the name, or the size of the paycheck, but the level of camaraderie I've felt with my team. I'd rather work with people I like than work on a product my friends use.

I'd rather work on something I found interesting than something I found uninteresting (or worse, exploitative), regardless of the name on the company.

I'd rather work for a place that recognizes that I want to spend evenings with my family than a place that thinks dedication to my job is more important than anything else.

If you want to try your hand at a Microsoft or Amazon interview, great! You may even do well and like the product or team you could work on. If so, enjoy your job there. But the emphasis on a few giant names in this sub is not really a service to anyone starting out a career.",2017-03-14 20:48:32
How I went from $14hr to 70k with no experience,988,bhfi88,https://www.reddit.com/r/cscareerquestions/comments/bhfi88/how_i_went_from_14hr_to_70k_with_no_experience/,282,1556264147.0,"I started off living in the Midwest, I knew nothing about IT and made $14 an hour as a contractor doing armed security work. Before that I was a failed real estate agent (being 18 when I tried real estate probably didn’t help..)


I’m now 23, I have no college degree and went straight from the security industry into a cloud position making $70,000 a year in a low cost of living area. I had to move for this job offer, though I had multiple offers across the USA.


I’ve had offers from Minneapolis for 72k, Austin for 74k, Tulsa for 65k, and accepted a job offer in Raleigh for 70k.


Before we go any further, if you are not in a “tech” area and want to accomplish this, plan to move.


Anyways, how did I do it? I started off studying what industry I wanted to be in and what’s popular. It ended up being the “cloud”. The good thing? It pays a lot, even if your new. The bad? It can be hard to get hired as a noob in the IT world starting at the cloud...UNLESS you take the correct steps.


Step 1: Prove my knowledge in various ways. How did I do this? First thing I did was self study and grab 3 certifications.

1. AWS Solutions Architect Associate
2. AWS SysOps Administrator Associate 
3. AWS Certified Developer Associate 


It took me 87 days to get all 3 of these certifications. After that, I needed to prove my knowledge in a real world way since I knocked the paper certifications out of the way. 


I did 2 Cloud AWS projects, one was a chat bot integrated into Facebook messenger that has automatic responses I built using Amazon Lex.

The second project was more on the infrastructure side of things.

Both were pretty simple projects for the most part.


Step 2: Establish credibility. I started a YouTube channel where I created AWS Cloud tutorials and even showed how to do some things like building the chat bot, hosting websites using s3, explaining what route53 is and the differences between all the options, etc. 


After this, I grabbed 1 more certification. I went ahead and passed the CompTIA Security+ certification so I could open the door to government jobs, though I didn’t end up at a government job. It only took 11 days, so it wasn’t too big of a deal.


After this I created a resume using one of the top formats posted on Reddit and updated all my LinkedIn information. I turned my status to searching for opportunities and started reaching out to recruiters and applying to jobs in cities across the United States. 


For specific areas I loved, I created a phone number using that area code and used it on that resume. At one point, I had 5 identical resumes but with different telephone numbers and used each one according to the city I was applying to.


After doing this, I started getting job offers. This path is much much better than help desk and can slingshot you forward in your career. I had no connections in this industry, no prior experience, and no college degree. 


Like I said, I received multiple offers, it’s not easy, but it’s possible.


Look for jobs titled:
Jr devops
DevOps 1
AWS Engineer
Cloud Support Engineer
Hell, I even got an SOC analyst offer in the cyber security space.


Study materials:
For the AWS certs I used LinuxAcademy and aCloudGuru, as well as reading white papers.


For CompTIA Security+ I used professor messers YouTube video series and also bought a cheap study guide to supplement it.",2019-04-26 03:35:47
The company screwed up and now they're paying me more.,977,bb7in0,https://www.reddit.com/r/cscareerquestions/comments/bb7in0/the_company_screwed_up_and_now_theyre_paying_me/,80,1554842776.0,"I just landed a Data Analytics internship with a very large multinational corporation that you all would know. I'm ecstatic about the opportunity, it feels very surreal to finally be working with such an awesome group and in the field I've been dreaming about! 

The cherry on the cake is when I was given a verbal offer last week, they quoted the salary for the starting pay for this position and not the internship salary. In the written offer they chose to honor this mistake and pay me the starting salary during my internship. 

I cannot believe the amount of luck I have had in this situation and will do everything I can to make the most of this incredible opportunity.",2019-04-09 16:46:16
"Is it normal to just stare at complex code and be like, wtf?",981,b1g8bd,https://www.reddit.com/r/cscareerquestions/comments/b1g8bd/is_it_normal_to_just_stare_at_complex_code_and_be/,321,1552692286.0,"I always wonder if there are people that just look at the code and flow through it and understand it.  Yes, after 4 years of working with it or if I built it, I can just blur my eyes and just by the pattern and colors of a code block, I know what it does.

But man... when I go on a new project, I look at the code and I try to follow it, I pull out a f'n pen and paper and try to write it down, I get lost then I break into a cold sweat and feel I'm gonna one day be a homeless bum as i get lost in a sea of technology.

One top of it, it seems every day a new framework comes out, a new cloud, a new library, a new language a new platform, etc.

So now I gotta learn all that stuff.  
I guess i'm looking for other people who feel the same... is it normal?  Am I stressing myself the F out for no reason because I just feel uniquely stupid?  I dunno",2019-03-15 19:24:46
My worst nightmare at work happened today...,980,bcf2uj,https://www.reddit.com/r/cscareerquestions/comments/bcf2uj/my_worst_nightmare_at_work_happened_today/,227,1555112780.0,"I was working from home, in a conference call and I thought I was muted.

I wasn't muted.

I slowly just want to sink and die now.",2019-04-12 19:46:20
"[Success Story] $20k to $115k in 5 years. If I can do it, so can you",979,alpxur,https://www.reddit.com/r/cscareerquestions/comments/alpxur/success_story_20k_to_115k_in_5_years_if_i_can_do/,255,1548973578.0,"I also want to share my journey to help anyone who is feeling lost and like there's no hope for them to get a job.

Let me start off by saying that I 100% believe that if I can pull this off, so can you. I barely graduated high school because I skipped class all the time and I dropped out of community college after 2 semesters because I couldn't be bothered with doing homework. It's not that I'm an unmotivated individual, but I just cannot stand formal education. Something in my brain isn't wired that way. 

So, rewind 5 years ago. I'm 18, freshly out of high school, working as a Deli Manager in a grocery store making something like $11 an hour and also working as a movie theater cleaner for $8 an hour. I also lived with my girlfriend (now wife) who was in school full time for education. My normal schedule would be 5am-3pm at the deli, then 6pm-2am at the movie theater. I worked 17 hour days for a year just so we could afford to eat and have somewhere to live. I would also like to point out that neither of us come from any money. If I lost either of my jobs, we'd be out on the streets.

Anyways, back to the story. Notice how I mentioned I worked 5am-3pm and then 6pm-2am? Guess what I did for the 3 hours in-between. The deli I worked at and the movie theater were both right across from the street from each other, with a Starbucks in the middle. So every day once I was done at the deli, I would mosey over to Starbucks with my laptop and make stupid simple websites with basic HTML, CSS, and JS. I knew working 17 hours a day wasn't sustainable and I thought maybe being a web developer would be a good fit for me since I liked solving problems and solving puzzles. 

Once I had something like 4 or 5 simple static websites created and looking moderately presentable, I created a portfolio and began to apply to every web developer job I could find. I finally landed one making $10 an hour. I was responsible for taking static websites and implementing them into Wordpress. Nothing crazy, just replacing some static text with dynamic fields on the backend. I absolutely hated this job because the boss was such an asshole, but I am grateful every single day that I stuck through it because if I had quit, I would still be working in a grocery store.

So cut to about 8 months into my first dev job, and I apply to another job closer to my apartment. This one isn't offering an hourly rate, but their starting salary is $30,000 a year. Let me tell you, when I got that offer in hand that said $30,000, I thought I was rich. I legitimately couldn't believe how much money they were willing to pay me to sit in an office for 8 hours a day and learn how to be a better developer. At this job I had a really great mentor and boss who I really appreciated. I stuck with this job for about a year. 

One night, on a whim, I decided to apply for a developer job posting I found on [weworkremotely.com](https://weworkremotely.com) for a marketing company that was based in California (I'm in Florida). I knew there was a 110% chance no company would be crazy enough to hire some 20 year old guy without a degree, with barely 2 years of experience, to work for them remotely, but you miss 100% of the shots you don't take, right? Plus, the worst they could do is send me an email saying ""Thanks for applying, we're going with another candidate, blah blah blah"".

Nope. 

The next day the creative director sent me an email and wanted to schedule a Skype interview for that day. Somehow I managed to convince them I was a worthy enough hire. They offered me $50,000 to work for them, full time, from home, in Florida, with 100% paid healthcare for me and my wife, and unlimited PTO. Whaaaaaat.

Now I'm really freaking out. I barely have 2 years of experience and this company is offering me $50,000 to work for them and create projects for their clients. That would be fine, except their clients ended up being Disney, FOX, Cisco, Dolby, and a few others. So what do I do? I stick it out, work 12 hour days, and thank god each day for some company being crazy enough to pay me that much money to add projects for companies like that to my portfolio and resume.

I stayed at that job for about a year and a half, learning all that I could. However, I didn't have any senior devs above me and I knew if I really wanted to grow as a developer, I needed to find a new job somewhere that I'd have a mentor and someone who would beat best practices into me. I applied for a job at a media company, with a team of 10 devs, offering me $70,000 a year. I had never worked with that many devs before and I had especially never imagined making $70,000 a year at 21 years old without a degree. When I interviewed there, I remember being so intimidated. I was certain all of the other developers would instantly notice I was a fraud. However, I powered through the interview and their coding challenge. To my surprise, this company was also crazy enough to hire me. I worked here for almost 2 years with the intention of only leaving if I got fired or let go. $70,000 was great, the mentors were great, the company was great, the work was great, everything here was great. 

Cut to last August. I got a message on LinkedIn from a VP of a F500 company that was looking to branch out into the market of my current employer. They needed developers. They tell me to name the title I want and salary I want. Well jeez, okay. Now here is where something happened. Through the process of talking with this new company, they were not interviewing me. I was interviewing them. The entire time. If I were going to leave my perfect job, I sure as shit better be leaving for an even more perfect job. So... salary? I think ""Might as well aim high. I have nothing to lose."". So I tell them I want $110,000, expecting them to meet me somewhere around $90,000 or $95,000.

Nope. They offered me $115,000 base salary + $20,000 in bonuses. Well god damn. I took that job faster than Internet Explorer crashes. 

I never, ever, ever, imaged I would be 24 years old earning six figures without a degree. I definitely did not even think I would ever hit six figures in my entire lifetime. But I guess the moral of my story is persistence is key. Through the first 2 and a half years of my career, I studied during all of my free time. Every day before work, every night after work, and I held myself accountable to at least 6 hours each day on the weekends. 

If I, a feeble brained guy that can barely cook without catching my kitchen on fire, can do it, so can anyone else. You just need to be persistent and not give up.

EDIT: Now that this post has hundreds of comments, I wanted to take a second to address the 2 types of negative people that have been messaging me and commenting. 

1. To the people saying this is an add for WWR: Honestly, I’m not sure how you read such a long post and the only thing you picked up was a website that barely added any backstory lol. If I were an advertiser paying money and this is what I got, I would 100% want my money back because this would be a terrible ad. 

By the way, make sure when you go to apply for a new job, you check out indeed.com! (/s)

2. To the people so concerned with how I slept when I worked in a deli: 
Well, I didn’t... that much. I’ve had a few people message me that understand and can empathize, but if you actually need to work and going to work is a choice between eating or not eating, you don’t really have a choice. Also, not sure where everyone got the idea that I was working 17 hours a day, 7 days a week. If you’ve ever worked full time, anywhere, you usually get 2 days off a week lol. Mine would be Wednesdays and Sundays, and this is when I would sleep. I also had a comfortable car to sleep in during lunch breaks at work. 

To everyone else, thanks for not feeding into the negative people and contributing to the conversation! And thanks everyone for the well wishes. ",2019-01-31 17:26:18
Slacking off might be the best career move,971,ayys2m,https://www.reddit.com/r/cscareerquestions/comments/ayys2m/slacking_off_might_be_the_best_career_move/,306,1552128587.0,"
There is this dude at my old job that was really nice to everyone, but did basically zero work. He would chat with everyone and make an appearance for a few hours and then be gone for the day. He was such a smooth talker that he didn’t get fired for like a year. I found out recently that he received a 4 month severance as well. He added me on LinkedIn and he had a new job in less than a month. Also, I see literally a decade of 3 month - 1 year stints on his LinkedIn that he just marks as short term contracts. He has probably made 100k just in severance payments and hasn’t actually had to work in years.

 It makes me think I’m going about this the wrong way with all this Leetcode business. Thoughts? Someone convince me not to leave after standup at 10:15am every day.",2019-03-09 05:49:47
"""grep"" is one of the most important tools you will ever use in your CS career. What are other programming lessons that are never taught in books or classes?",962,8r770l,https://www.reddit.com/r/cscareerquestions/comments/8r770l/grep_is_one_of_the_most_important_tools_you_will/,464,1529055071.0,"When looking up a codebase, you can import it into an IDE that lets you jump to function/variable declarations, find out each call site of a function, etc. Or you can set up a tool like cscope. Though often, it will be too much hassle, or the IDE wont import correctly, the project may simply be too big and unweildly, or in a new weird language. In all kinds of situations, grep will come to your rescue as you try to figure out what does these weird function calls do, or who are the people calling this super cryptic function because maybe that will explain a little.

Sometimes, you may just get a codebase with zero clue where is the part *you* are interested in. In which case you can just start grepping for random keywords until you locate the correct module. For example, if you are looking for the GLSL shaders in a game code maybe you can just grep for ""gl_FragColor"". It will find the shaders regardless of file extension, embedded in a C or Java file, etc.

Of course no programming book mentions ""grep"". Or how to read code in general.

So, what are other useful tips that you must figure out yourself, or learn from someone, but are never taught in books or classes?",2018-06-15 05:31:11
